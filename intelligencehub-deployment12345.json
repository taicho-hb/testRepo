{
  "productInfo" : {
    "company" : "HighByte",
    "product" : "IntelligenceHub",
    "version" : "4.2.0",
    "build" : "2025.5.27.202",
    "stage" : "Beta"
  },
  "project" : {
    "version" : 11,
    "connections" : [ {
      "name" : "IgnitionContainer",
      "uri" : "inductive.ignition://localhost:45291",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 30000,
        "compression" : "GZIP",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "L0VkyQhPkUGe4UXMCDxCXQ==",
            "ciphertext" : "w7IRTpqQ2Ba79Tn4BWcXtQ=="
          }
        }
      }
    }, {
      "name" : "MsiMessages",
      "uri" : "jdbc.sqlite://sQLite",
      "tags" : [ "PAS_X_MSI" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "database" : "..\\appData\\MsiMessages.db",
        "strategy" : {
          "type" : "default"
        }
      }
    }, {
      "name" : "MsiRESTClient",
      "uri" : "rest.client://MSIRestClient",
      "tags" : [ "PAS_X_MSI" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "authentication" : {
          "type" : "OAuth 2.0",
          "options" : {
            "grantType" : "password",
            "clientAuthenticationType" : "header",
            "loginURL" : "http://localhost:9000/getAccessToken",
            "username" : "user",
            "password" : {
              "type" : "Encrypted",
              "value" : {
                "keyId" : "0Tk3C1Xr1C5LAKQUMfk7Vw==",
                "iv" : "ZcD4GxgEEHhpDc+kKgshRg==",
                "ciphertext" : "EM2b+j8ommk5g7+Fazo6pg=="
              }
            }
          }
        },
        "baseURL" : "http://localhost:9000"
      }
    }, {
      "name" : "OpcPipelineMechanics",
      "uri" : "opc.tcp://52.10.6.4:49320",
      "tags" : [ "starter_solution", "PipelineMechanics" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : {
        "subscriptionRate" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "security" : "None",
        "authentication" : {
          "type" : "Anonymous"
        },
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 5000,
        "maxItemsPerRead" : 512,
        "maxItemsPerWrite" : 256,
        "sessionName" : ""
      }
    }, {
      "name" : "SqliteOpenAiHistory",
      "uri" : "jdbc.sqlite://SqliteOpenAiHistory",
      "tags" : [ "OpenAiChatHistoryV1" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "database" : "OpenAiHistory.db"
      }
    }, {
      "name" : "Tutorial_MQTT",
      "uri" : "mqtt://0.0.0.0:1885",
      "tags" : [ "Tutorial" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectionTimeoutSeconds" : 10,
        "keepAliveSeconds" : 60,
        "requestTimeoutMS" : 5000,
        "cleanSession" : true,
        "ssl" : false,
        "redundantBrokers" : [ ],
        "inputDiscovery" : ""
      }
    }, {
      "name" : "Tutorial_OPC_UA",
      "uri" : "opc.tcp://52.10.6.4:49320",
      "tags" : [ "Tutorial" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : {
        "subscriptionRate" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "security" : "None",
        "authentication" : {
          "type" : "Anonymous"
        },
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 5000,
        "maxItemsPerRead" : 512,
        "maxItemsPerWrite" : 256,
        "certificateKeyPair" : "app-certificate-private-key",
        "sessionName" : ""
      }
    }, {
      "name" : "bedrock",
      "uri" : "aws.bedrock://bedrock",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "endpoint" : "https://webhook.site/03439e40-fee2-458e-a441-8bfc0072223b/",
        "accessKey" : "test",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "HxlPe/8ekNypLj7Jp0IFKA==",
            "ciphertext" : "1C5uJuToXEfPcnpPzHnfew=="
          }
        },
        "region" : "test"
      }
    }, {
      "name" : "blob",
      "uri" : "azure.blob://blob",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "endpointURL" : "http://localhost:45245",
        "encryptConnectionString" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "Dp0obeGROCSWdBQCrwgRPw==",
            "iv" : "Bn6m1L1roTZkIe//hNa7Kw==",
            "ciphertext" : "Mq9XlFWFDHbkP/SnaehQyQ=="
          }
        }
      }
    }, {
      "name" : "crate",
      "uri" : "rest.client://crate",
      "tags" : [ "WriteToCrate" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "authentication" : {
          "type" : "Basic Auth",
          "options" : {
            "username" : "admin",
            "password" : {
              "type" : "Encrypted",
              "value" : {
                "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
                "iv" : "T67pOlZZDlEZzk6Ojv5TAg==",
                "ciphertext" : "xJIoLJp0bOzjn+AZsmaR+++VuMyPp9wvjZrN1T/8O/c="
              }
            }
          }
        },
        "baseURL" : "https://harlequin-wat-tambor.eks1.us-east-1.aws.cratedb.net:4200",
        "ignoreCertificate" : false
      }
    }, {
      "name" : "cratejdbc",
      "uri" : "jdbc://1.2.3.4:1234",
      "tags" : [ "WriteToCrate" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "username" : "highbyte",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "RreBP1na1OJmadZ/AkAbDQ==",
            "ciphertext" : "bbBQ3FwrPIwZXtBmQLa1Ug=="
          }
        },
        "classPath" : "io.crate.client.jdbc.CrateDriver",
        "database" : "",
        "connectString" : "jdbc:crate://harlequin-wat-tambor.eks1.us-east-1.aws.cratedb.net:5432/",
        "sqlSyntax" : "postgresql"
      }
    }, {
      "name" : "crateps",
      "uri" : "jdbc.postgresql://harlequin-wat-tambor.eks1.us-east-1.aws.cratedb.net:5432",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "database" : "crate",
        "username" : "highbyte",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "Lv90+C68Sz67vfdPYmlK4Q==",
            "ciphertext" : "W9LYkePWq7YARHoDaVrRxA=="
          }
        }
      }
    }, {
      "name" : "cratetimescale",
      "uri" : "jdbc.timescaledb://harlequin-wat-tambor.eks1.us-east-1.aws.cratedb.net:5432",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "database" : "crate",
        "username" : "admin",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "lEpr5iS6oHNlSeVju0ch3A==",
            "ciphertext" : "r/V4cb/hkTmpvA/fEPX87BxYgn7hsIMHckCdIS5tqU0="
          }
        }
      }
    }, {
      "name" : "csv",
      "uri" : "file.csv://csv",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "directory" : "."
      }
    }, {
      "name" : "file",
      "uri" : "file://file",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "communicationProtocol" : {
          "type" : "FILE_PROTOCOL",
          "options" : { }
        },
        "directory" : "../.."
      }
    }, {
      "name" : "hmq",
      "uri" : "mqtt://1d6221d0f2b94b98aa97ce692f59d7a8.s1.eu.hivemq.cloud:8884",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectionTimeoutSeconds" : 10,
        "keepAliveSeconds" : 60,
        "requestTimeoutMS" : 5000,
        "maxInflight" : 1000,
        "cleanSession" : true,
        "username" : "taicho",
        "ssl" : true,
        "redundantBrokers" : [ ],
        "inputDiscovery" : "",
        "clientId" : "test",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "Dp0obeGROCSWdBQCrwgRPw==",
            "iv" : "KiBaQmIEiJJkuzDJY6/ksw==",
            "ciphertext" : "+xKwNfc9fcU0k83Yjs86fg=="
          }
        },
        "ignoreCertificate" : true
      }
    }, {
      "name" : "ig",
      "uri" : "inductive.ignition://localhost:45283",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 30000,
        "compression" : "GZIP",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "yTtdV78J6scxBxcdsxSPJA==",
            "ciphertext" : "GIM+x+Ia2DQ2GStxMINy0A=="
          }
        }
      }
    }, {
      "name" : "kafka",
      "uri" : "kafka://kafka",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "securityType" : "PLAINTEXT",
        "brokerURIs" : "localhost::9000"
      }
    }, {
      "name" : "mqtt",
      "uri" : "mqtt://0.0.0.0:1885",
      "tags" : [ "starter_solution" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectionTimeoutSeconds" : 10,
        "keepAliveSeconds" : 60,
        "requestTimeoutMS" : 5000,
        "cleanSession" : true,
        "clientId" : "mqtt",
        "ssl" : false,
        "redundantBrokers" : [ ],
        "inputDiscovery" : "#",
        "maxInflight" : 1000
      }
    }, {
      "name" : "ollama",
      "uri" : "openai.ai://openai",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "baseURL" : "http://localhost:11434/v1"
      }
    }, {
      "name" : "ollamaRest",
      "uri" : "rest.client://ollamaRest",
      "tags" : [ "OpenAiChatHistoryV1" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "authentication" : {
          "type" : "None",
          "options" : { }
        },
        "baseURL" : "http://localhost:11434/v1"
      }
    }, {
      "name" : "opc",
      "uri" : "opc.tcp://52.10.6.4:49320",
      "tags" : [ "starter_solution" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : {
        "subscriptionRate" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "security" : "None",
        "authentication" : {
          "type" : "Anonymous"
        },
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 5000,
        "maxItemsPerRead" : 512,
        "maxItemsPerWrite" : 256,
        "sessionName" : ""
      }
    }, {
      "name" : "opc_ig",
      "uri" : "opc.tcp://localhost:65250",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : {
        "subscriptionRate" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "security" : "None",
        "authentication" : {
          "type" : "Anonymous"
        },
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 5000,
        "maxItemsPerRead" : 512,
        "maxItemsPerWrite" : 256
      }
    }, {
      "name" : "openai",
      "uri" : "openai.ai://openai",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "baseURL" : "https://webhook.site/03439e40-fee2-458e-a441-8bfc0072223b/",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "MtrrxgskukyIq8gjsZnbuw==",
            "ciphertext" : "Owbpr04hllc3DYBoS0452w=="
          }
        }
      }
    }, {
      "name" : "pg",
      "uri" : "jdbc.postgresql://localhost:5345",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "database" : "postgres",
        "username" : "postgres",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "LiQaWEXrS0Ed9Plz7IXSZQ==",
            "ciphertext" : "wE4huVRFhDcbOVJwNIB4/pRFNSZyw8++4RCZ667b07s="
          }
        }
      }
    }, {
      "name" : "pgcog",
      "uri" : "jdbc.postgresql://localhost:5345",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "database" : "postgres",
        "username" : "postgres",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "cjIq1uJ9nvZrKhFPX7zfUA==",
            "ciphertext" : "XbRILmMFWmD4c0tMx5L+cbhCorWhouQLd4I2pTH1GUc="
          }
        }
      }
    }, {
      "name" : "pi",
      "uri" : "osisoft.afsdk://localhost:45290",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectTimeoutSeconds" : 10,
        "requestTimeoutMS" : 300000,
        "compression" : "GZIP",
        "auth" : {
          "type" : "credentials",
          "username" : "osisoft",
          "password" : {
            "type" : "Encrypted",
            "value" : {
              "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
              "iv" : "xh6JUv+pQPWvoADWCtnyuw==",
              "ciphertext" : "ofsZYNhgNlNVdTH7BeSMQg=="
            }
          }
        },
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "R8iOKOmfRCWXtMqEKm6cbQ==",
            "ciphertext" : "wpiKde3YfQBoJ1HxoVAz5xSi5zBV7Hc06gBqmthh68c1jhHoOEUIpyM8xLpWY1K5"
          }
        }
      }
    }, {
      "name" : "piremote",
      "uri" : "osisoft.afsdk://44.237.170.95:45290",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "connectTimeoutSeconds" : 5,
        "requestTimeoutMS" : 30000,
        "compression" : "GZIP",
        "auth" : {
          "type" : "credentials",
          "username" : "osisoft",
          "password" : {
            "type" : "Encrypted",
            "value" : {
              "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
              "iv" : "q+/Txca5N8uJk0SphV3qyw==",
              "ciphertext" : "MCTETy7miSptdaNcXEzUDg=="
            }
          }
        },
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "BePtVHbEwkn7hK2WUAnhvQ==",
            "ciphertext" : "zyfqsbRrUBSx6cG2wD7fJQ=="
          }
        }
      }
    }, {
      "name" : "s3",
      "uri" : "aws.s3://s3",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "accessKey" : "test",
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "RHDWFgM9CiNnqaq3JHGwmw==",
            "ciphertext" : "p8eXe//VTJf0g86YoscCyQ=="
          }
        },
        "region" : "test"
      }
    }, {
      "name" : "sf",
      "uri" : "jdbc.snowflake://sf",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "account" : "test",
        "user" : "test",
        "role" : "test",
        "database" : "test",
        "schema" : "test",
        "warehouse" : "test",
        "clientKey" : "app-certificate-private-key"
      }
    }, {
      "name" : "sql",
      "uri" : "jdbc.sqlserver://52.10.6.4:1433",
      "tags" : [ "starter_solution" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "database" : "serviceinfo",
        "username" : "highbyte",
        "strategy" : {
          "type" : "default"
        },
        "password" : {
          "type" : "Encrypted",
          "value" : {
            "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
            "iv" : "9DkAEHSIToj1RQzt1RPymA==",
            "ciphertext" : "7HQP9oJJMDDaxbQUfsl55w=="
          }
        }
      }
    }, {
      "name" : "sql_mes",
      "uri" : "jdbc.sqlserver://52.10.6.4:1433",
      "tags" : [ "starter_solution" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "database" : "mes",
        "username" : "highbyte",
        "strategy" : {
          "type" : "default"
        },
        "connectString" : "password=password"
      }
    }, {
      "name" : "sqlite",
      "uri" : "jdbc.sqlite://sqlite",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "database" : "dt.db"
      }
    }, {
      "name" : "sqliteParamTest",
      "uri" : "jdbc.sqlite://sqliteParamTest",
      "tags" : [ "PipelineStageCommaParam" ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "database" : "ParamTest.db",
        "strategy" : {
          "type" : "default"
        }
      }
    }, {
      "name" : "testsqlite",
      "uri" : "jdbc.sqlite://testsqlite",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "database" : "test,db"
      }
    }, {
      "name" : "ts",
      "uri" : "jdbc.timescaledb://localhost:5433",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "strategy" : {
          "type" : "default"
        },
        "database" : "postgres",
        "username" : "postgres",
        "connectString" : "password=password"
      }
    }, {
      "name" : "webh",
      "uri" : "rest.client://webh",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "authentication" : {
          "type" : "None",
          "options" : { }
        },
        "baseURL" : "https://webhook.site/cf9a5478-b6ff-42a6-9f25-96e3368af6e2"
      }
    }, {
      "name" : "wh",
      "uri" : "webhook.server://wh:9001",
      "tags" : [ ],
      "writes" : {
        "flattenModeledValues" : false
      },
      "subscriptions" : { },
      "storeForward" : {
        "enabled" : false,
        "maxEntries" : 100,
        "waitOnFailureInterval" : {
          "duration" : 1,
          "units" : "Seconds"
        }
      },
      "settings" : {
        "scheme" : "http",
        "authorizationType" : "Bearer",
        "authorizationToken" : "test123"
      }
    } ],
    "conditions" : [ {
      "name" : "TestPick",
      "uri" : "condition.custom",
      "tags" : [ ],
      "settings" : {
        "inReferences" : [ "{{System.Internal}}" ],
        "expression" : "([\r\n\t{\r\n\t\t\"Total Power Consumption\": 111.90950535829926,\r\n\t\t\"Total Downtime\": 2736726.364487618,\r\n\t\t\"Avg Power Consumption\": 17.742266799483023,\r\n\t\t\"Avg 30d Downtime\": 675.7467312000399\r\n\t}\r\n])"
      }
    }, {
      "name" : "calc",
      "uri" : "condition.aggregate",
      "tags" : [ ],
      "settings" : {
        "scanInterval" : {
          "units" : "Seconds",
          "duration" : 1
        },
        "storageInterval" : {
          "units" : "Minutes",
          "duration" : 10
        },
        "window" : {
          "type" : "sliding",
          "windowInterval" : {
            "units" : "Minutes",
            "duration" : 1
          }
        },
        "enabled" : true,
        "inReferences" : [ "{{Connection.opc.Motor001_PLC_Amps}}" ]
      }
    }, {
      "name" : "db",
      "uri" : "condition.deadband",
      "tags" : [ ],
      "settings" : {
        "inReferences" : [ "{{System.Internal}}" ],
        "absoluteDeadband" : 1
      }
    }, {
      "name" : "isalarm",
      "uri" : "condition.alarm",
      "tags" : [ ],
      "settings" : {
        "alarmType" : "Time",
        "intervalBeforeAlarm" : {
          "units" : "Seconds",
          "duration" : 10
        },
        "inReferences" : [ "{{Connection.opc.Motor001_PLC_Amps}}" ]
      }
    }, {
      "name" : "test",
      "uri" : "condition.custom",
      "tags" : [ ],
      "settings" : {
        "inReferences" : [ "{{Connection.opc.Motor001_PLC_param}}" ],
        "expression" : "{{this.currentValue}}"
      }
    } ],
    "inputs" : [ {
      "name" : "Sample_Tags",
      "connection" : "IgnitionContainer",
      "type" : "inductive.ignition",
      "qualifier" : {
        "type" : "path",
        "tagAddress" : "[Sample_Tags]"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "ClosedOrderParameterMessages",
      "connection" : "MsiMessages",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select * from Messages where Status = 'Closed'"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "DeleteOrderParameterMessages",
      "connection" : "MsiMessages",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "delete from Messages where _id = {{this._id}}"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "_id",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "{{this._id}}",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "ErrorOrderParameterMessages",
      "connection" : "MsiMessages",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select * from Messages where status = 'Error'"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "InProcessOrderParameterMessages",
      "connection" : "MsiMessages",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select * from Messages where Status = 'Inprocess' ORDER BY _timestamp "
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "OpenOrderParameterMessages",
      "connection" : "MsiMessages",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select * from Messages where Status = 'Open' ORDER BY _timestamp LIMIT 1"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Motor001_PLC",
      "connection" : "OpcPipelineMechanics",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor{{this.num}}.PLC.{{this.metric}}",
        "dataType" : "Auto",
        "type" : "Tag",
        "maxDepth" : 0,
        "cacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "ignoreBadQuality" : false,
        "browseVariableNodes" : false,
        "samplingInterval" : {
          "duration" : 0,
          "units" : "Seconds"
        },
        "isComplex" : true
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "num",
          "pattern" : ""
        }, {
          "name" : "metric",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "num",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "001",
            "internalType" : "String"
          }, {
            "attributeType" : "Internal",
            "name" : "metric",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "Amps",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "ClearTable",
      "connection" : "SqliteOpenAiHistory",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "delete from ChatHistory;"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "ClearTableParam",
      "connection" : "SqliteOpenAiHistory",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "delete from {{this.tableName}};"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "tableName",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "tableName",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "CreateTable",
      "connection" : "SqliteOpenAiHistory",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "create table if not exists ChatHistory (role text, content text)"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "DropModelTable",
      "connection" : "SqliteOpenAiHistory",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "drop table SetModel"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "DropTable",
      "connection" : "SqliteOpenAiHistory",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "drop table ChatHistory"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "GetModel",
      "connection" : "SqliteOpenAiHistory",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select model from SetModel"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "ReadHistory",
      "connection" : "SqliteOpenAiHistory",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select * from '{{Connection.SqliteOpenAiHistory.SelectTable[0].tableName}}'"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "SelectTable",
      "connection" : "SqliteOpenAiHistory",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select tableName from SelectTable  where _id = 1"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "TestReadTable",
      "connection" : "SqliteOpenAiHistory",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select * from user123"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "INJECT1_InjectionMolding1",
      "connection" : "Tutorial_OPC_UA",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "INJECT1.InjectionMolding1",
        "dataType" : "Auto",
        "type" : "Branch",
        "maxDepth" : 1
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "bedrock",
      "type" : "aws.bedrock",
      "qualifier" : {
        "modelType" : "llama3.2",
        "responseFormat" : "string",
        "instruction" : "be a pirate",
        "message" : "yo?"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "insert",
      "connection" : "crate",
      "type" : "rest.client",
      "qualifier" : {
        "acceptType" : "*/*",
        "method" : "POST",
        "contentType" : "application/json",
        "includeMetadata" : false,
        "endpointURL" : "/_sql",
        "isFile" : false,
        "body" : "{\"stmt\":\"insert into mytable (name) values ('123')\"}"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "read",
      "connection" : "crate",
      "type" : "rest.client",
      "qualifier" : {
        "acceptType" : "*/*",
        "method" : "POST",
        "contentType" : "application/json",
        "includeMetadata" : false,
        "endpointURL" : "/_sql",
        "isFile" : false,
        "body" : "{\"stmt\":\"select * from {{this.tableName}}\"}"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "tableName",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "tableName",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "ReadParam",
      "connection" : "cratejdbc",
      "type" : "jdbc",
      "qualifier" : {
        "query" : "select * from {{this.tableName}}",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "tableName",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "tableName",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "create",
      "connection" : "cratejdbc",
      "type" : "jdbc",
      "qualifier" : {
        "query" : "CREATE TABLE mytable2 (\n  col1 TEXT,\n  col2 int\n);\n",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "cratejdbc",
      "type" : "jdbc",
      "qualifier" : {
        "query" : "select * from testtable1"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "insert",
      "connection" : "crateps",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "type" : "query",
        "query" : "insert into \"doc\".\"testtable\" (col1) values ('1234')",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "showtables",
      "connection" : "crateps",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "type" : "query",
        "query" : "show tables in doc;"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "crateps",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "type" : "query",
        "query" : "select * from \"doc\".\"testtable1\"",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "cratetimescale",
      "type" : "jdbc.timescaledb",
      "qualifier" : {
        "query" : "select * from \"doc\".\"testtable\""
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "browse",
      "connection" : "file",
      "type" : "file",
      "qualifier" : {
        "type" : "Browse",
        "fileName" : "(.+)",
        "encoding" : "Binary",
        "timeFilterType" : "None",
        "indexFile" : false,
        "relativePath" : ".",
        "recursive" : true
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "HighByte",
      "connection" : "ig",
      "type" : "inductive.ignition",
      "qualifier" : {
        "type" : "path",
        "tagAddress" : "[HighByte]test/BUILD1"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "_System_Gateway_CurrentDateTime",
      "connection" : "ig",
      "type" : "inductive.ignition",
      "qualifier" : {
        "type" : "path",
        "tagAddress" : "[System]Gateway/CurrentDateTime"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "_System_Gateway_Devices_sample",
      "connection" : "ig",
      "type" : "inductive.ignition",
      "qualifier" : {
        "type" : "path",
        "tagAddress" : "[System]Gateway/Devices/sample"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "_System__Gateway",
      "connection" : "ig",
      "type" : "inductive.ignition",
      "qualifier" : {
        "type" : "path",
        "tagAddress" : "[System]Gateway"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "res",
      "connection" : "kafka",
      "type" : "kafka",
      "qualifier" : {
        "fromOffset" : "latest",
        "keyFormat" : "any",
        "valueFormat" : "any",
        "maxMessages" : 1,
        "topic" : "test",
        "group" : "grp"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Site1",
      "connection" : "mqtt",
      "type" : "mqtt",
      "qualifier" : {
        "inputType" : "LastPublish",
        "includeTopic" : false,
        "payloadType" : "any",
        "topic" : "Site1/#"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Site1_Area1_Line1_assets_motors",
      "connection" : "mqtt",
      "type" : "mqtt",
      "qualifier" : {
        "inputType" : "LastPublish",
        "includeTopic" : false,
        "payloadType" : "any",
        "topic" : "Site1/Area1/Line1/assets/motors/#"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Site1_Area1_Line1_assets_motors_Motor001",
      "connection" : "mqtt",
      "type" : "mqtt",
      "qualifier" : {
        "inputType" : "LastPublish",
        "includeTopic" : false,
        "payloadType" : "any",
        "topic" : "Site1/Area1/Line1/assets/motors/Motor001 /#"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Site1_Area1_Line1_assets_motors_Motor002",
      "connection" : "mqtt",
      "type" : "mqtt",
      "qualifier" : {
        "inputType" : "LastPublish",
        "includeTopic" : false,
        "payloadType" : "any",
        "topic" : "Site1/Area1/Line1/assets/motors/Motor002 /#"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Site1_Area1_Line1_assets_motors_Motor003",
      "connection" : "mqtt",
      "type" : "mqtt",
      "qualifier" : {
        "inputType" : "LastPublish",
        "includeTopic" : false,
        "payloadType" : "any",
        "topic" : "Site1/Area1/Line1/assets/motors/Motor003 /#"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Site1_Area1_Line1_assets_motors_Motor004",
      "connection" : "mqtt",
      "type" : "mqtt",
      "qualifier" : {
        "inputType" : "LastPublish",
        "includeTopic" : false,
        "payloadType" : "any",
        "topic" : "Site1/Area1/Line1/assets/motors/Motor004 /#"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "ollama",
      "type" : "openai.ai",
      "qualifier" : {
        "responseFormat" : "string",
        "message" : "yo?",
        "instruction" : "be a pirate.",
        "modelType" : "llama3.2"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "chat",
      "connection" : "ollamaRest",
      "type" : "rest.client",
      "qualifier" : {
        "acceptType" : "*/*",
        "method" : "POST",
        "contentType" : "application/json",
        "includeMetadata" : false,
        "endpointURL" : "/chat/completions",
        "body" : "{\n    \"model\": \"llama3.2\",\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"content\": \"be a pirate.\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"yo?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Yer talkin' to a scurvy dog, matey! What be bringin' ye to these fair waters? Need some treasure huntin' advice or just want to swab the decks?\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"what is everything I ever said?\"\n        }\n    ]\n}",
        "isFile" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "chat_dynRef",
      "connection" : "ollamaRest",
      "type" : "rest.client",
      "qualifier" : {
        "acceptType" : "*/*",
        "method" : "POST",
        "contentType" : "application/json",
        "includeMetadata" : false,
        "endpointURL" : "/chat/completions",
        "body" : "{\n    \"model\": \"{{this.model}}\",\n    \"messages\": {{Connection.SqliteOpenAiHistory.ReadHistory}}\n}",
        "isFile" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "model",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "model",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "chat_param",
      "connection" : "ollamaRest",
      "type" : "rest.client",
      "qualifier" : {
        "acceptType" : "*/*",
        "method" : "POST",
        "contentType" : "application/json",
        "includeMetadata" : false,
        "endpointURL" : "/chat/completions",
        "body" : "{\n    \"model\": \"llama3.2\",\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"content\": \"be a pirate.\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"yo?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Yer talkin' to a scurvy dog, matey! What be bringin' ye to these fair waters? Need some treasure huntin' advice or just want to swab the decks?\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"what is everything I ever said?\"\n        }\n    ]\n}",
        "isFile" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "BUILD1",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "BUILD1",
        "dataType" : "Auto",
        "type" : "Branch",
        "maxDepth" : 1,
        "cacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "ignoreBadQuality" : false,
        "browseVariableNodes" : false,
        "isComplex" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Motor001_PLC_Amps",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor001.PLC.Amps",
        "type" : "Tag",
        "dataType" : "UInt32",
        "samplingInterval" : {
          "duration" : 0,
          "units" : "Seconds"
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Motor001_PLC_Error",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor001.PLC.Error",
        "type" : "Tag",
        "dataType" : "String"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Motor001_PLC_Speed",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor001.PLC.Speed",
        "type" : "Tag",
        "dataType" : "UInt32"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Motor001_PLC_Vibration",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor001.PLC.Vibration",
        "type" : "Tag",
        "dataType" : "Real64"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "Motor001_PLC_param",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor{{this.number}}.PLC",
        "type" : "Branch",
        "dataType" : "UInt32",
        "samplingInterval" : {
          "duration" : 0,
          "units" : "Seconds"
        },
        "isComplex" : false,
        "maxDepth" : 0,
        "cacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "ignoreBadQuality" : false,
        "browseVariableNodes" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "number",
          "pattern" : "001-3"
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "number",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "001",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "Motor1to4_PLC",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor{{this.motorid}}.PLC",
        "dataType" : "Auto",
        "type" : "Branch",
        "maxDepth" : 0,
        "cacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "ignoreBadQuality" : false,
        "browseVariableNodes" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Static",
        "params" : [ {
          "name" : "motorid",
          "pattern" : "001-2"
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "motorid",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "001",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "MotorXXX_PLC",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor{{this.motorNumber}}.PLC.Amps",
        "dataType" : "Auto",
        "type" : "Tag",
        "maxDepth" : 0,
        "cacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "ignoreBadQuality" : false,
        "browseVariableNodes" : false,
        "samplingInterval" : {
          "duration" : 0,
          "units" : "Seconds"
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "name" : "Motor{{this.motorNumber}}{{this.extraContext}}",
        "type" : "Static",
        "params" : [ {
          "name" : "motorNumber",
          "pattern" : "001-5"
        }, {
          "name" : "extraContext",
          "pattern" : "bye*5"
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "motorNumber",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "001",
            "internalType" : "String"
          }, {
            "attributeType" : "Internal",
            "name" : "extraContext",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "MotorXXX_PLC_XXX",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor{{this.number}}.PLC.{{this.metric}}",
        "type" : "Tag",
        "dataType" : "UInt32",
        "samplingInterval" : {
          "duration" : 0,
          "units" : "Seconds"
        },
        "isComplex" : true
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "number",
          "pattern" : ""
        }, {
          "name" : "metric",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "number",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "001",
            "internalType" : "String"
          }, {
            "attributeType" : "Internal",
            "name" : "metric",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "Amps",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "Packaging_InjectionMolding1_ProductID",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Packaging.InjectionMolding1.ProductID",
        "type" : "Tag",
        "dataType" : "Real64"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "openai",
      "type" : "openai.ai",
      "qualifier" : {
        "responseFormat" : "json",
        "message" : "USER MESSAGE",
        "modelType" : "USER MODEL",
        "instruction" : "USER INSTRUCTION"
      },
      "cacheLifetime" : {
        "enabled" : false,
        "interval" : {
          "duration" : 1,
          "units" : "Hours"
        }
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "create",
      "connection" : "pgcog",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "type" : "query",
        "query" : "create table createtable (id int, col1 text)"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "hist",
      "connection" : "pgcog",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "type" : "query",
        "query" : "\\s"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "read",
      "connection" : "pgcog",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "type" : "query",
        "query" : "select * from testtable"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "readcreate",
      "connection" : "pgcog",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "type" : "query",
        "query" : "select * from \"public\".\"createtable\""
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "pgcog",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "type" : "query",
        "query" : "insert into testtable (col1) values ('1234')",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "METADATA_NG_TEST_2",
      "connection" : "pi",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "point",
        "options" : {
          "get" : "currentValue",
          "includeMetaData" : true,
          "includeChildren" : true,
          "useReference" : false,
          "points" : [ "SINUSOID" ],
          "additionalMetadataProperties" : [ "excdev", "future", "changedate" ],
          "query" : "",
          "index" : false,
          "indexWindow" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "WellDowntimeDemo_West_Texas",
      "connection" : "pi",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "asset",
        "options" : {
          "database" : "WellDowntimeDemo",
          "query" : "Name: 'West Texas' Parent: ''",
          "get" : "currentValue",
          "index" : false,
          "includeMetaData" : false,
          "includeChildren" : false
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "demoReadTest",
      "connection" : "pi",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "point",
        "options" : {
          "get" : "currentValue",
          "includeMetaData" : true,
          "includeChildren" : true,
          "useReference" : false,
          "points" : [ "demo.crusher.crushRate" ],
          "query" : "",
          "index" : false,
          "indexWindow" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "pi",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "eventframe",
        "options" : {
          "get" : "currentValue",
          "includeMetaData" : false,
          "includeChildren" : true,
          "database" : "ReactorsDemo",
          "query" : "Template:\"Downtime\"",
          "index" : false,
          "indexWindow" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "WellDowntimeDemo_West_Texas",
      "connection" : "piremote",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "asset",
        "options" : {
          "database" : "WellDowntimeDemo",
          "query" : "Name: 'West Texas' Parent: ''",
          "get" : "currentValue",
          "index" : false,
          "includeMetaData" : false,
          "includeChildren" : false
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "WellDowntimeDemo_West_Texas_param",
      "connection" : "piremote",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "asset",
        "options" : {
          "database" : "WellDowntimeDemo",
          "get" : "currentValue",
          "index" : false,
          "includeMetaData" : false,
          "includeChildren" : false,
          "indexWindow" : "",
          "query" : "{{this.p}}"
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "p",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "p",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "test",
      "connection" : "piremote",
      "type" : "osisoft.afsdk",
      "qualifier" : {
        "type" : "eventframe",
        "options" : {
          "get" : "currentValue",
          "includeMetaData" : false,
          "includeChildren" : true,
          "database" : "ReactorsDemo",
          "query" : "Template:\"Downtime\"",
          "index" : false,
          "indexWindow" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "s3",
      "type" : "aws.s3",
      "qualifier" : {
        "type" : "read",
        "encoding" : "Binary",
        "includeMetadata" : false,
        "recursive" : false,
        "timeFilterEnabled" : false,
        "bucketName" : "test",
        "key" : "test"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "sf",
      "type" : "jdbc.snowflake",
      "qualifier" : {
        "query" : "test"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "SetQueryParam",
      "connection" : "sql",
      "type" : "jdbc.sqlserver",
      "qualifier" : {
        "type" : "query",
        "query" : "SET @Activity = '{{this.activity}}'",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "get_motor001_service_info",
      "connection" : "sql",
      "type" : "jdbc.sqlserver",
      "qualifier" : {
        "type" : "query",
        "query" : "SELECT * FROM [dbo].[lastservice] WHERE [dbo].[lastservice].[machineid] = 'motor001'",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "get_motor001_service_info_copy",
      "connection" : "sql",
      "type" : "jdbc.sqlserver",
      "qualifier" : {
        "type" : "query",
        "query" : "SELECT * FROM [dbo].[lastservice] WHERE [dbo].[lastservice].[machineid] = '{{this.motorId}}'",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "motorId",
          "pattern" : "MOTOR004"
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "motorId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "MOTOR001",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "get_motorXXX_service_info",
      "connection" : "sql",
      "type" : "jdbc.sqlserver",
      "qualifier" : {
        "type" : "query",
        "query" : "SELECT * FROM [dbo].[lastservice] WHERE [dbo].[lastservice].[machineid] = '{{this.motorid}}'",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "motorid"
        }, {
          "name" : "branch",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "motorid",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "motor001",
            "internalType" : "String"
          }, {
            "attributeType" : "Internal",
            "name" : "branch",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "PLC",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "test",
      "connection" : "sql",
      "type" : "jdbc.sqlserver",
      "qualifier" : {
        "type" : "query",
        "query" : "select * from [dbo].[cmms_servicelogs]"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "mesWO",
      "connection" : "sql_mes",
      "type" : "jdbc.sqlserver",
      "qualifier" : {
        "type" : "query",
        "query" : "select * from [dbo].[WOTracking] where [dbo].[WOTracking].[ProductID] = {{Connection.opc.Packaging_InjectionMolding1_ProductID}}"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "mesWO_param",
      "connection" : "sql_mes",
      "type" : "jdbc.sqlserver",
      "qualifier" : {
        "type" : "query",
        "query" : "select * from [dbo].[WOTracking] where [dbo].[WOTracking].[ProductID] = '{{this.productid}}'",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "productid",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "productid",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "10001",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "test",
      "connection" : "sql_mes",
      "type" : "jdbc.sqlserver",
      "qualifier" : {
        "type" : "query",
        "query" : "select * from [dbo].[WorkOrderInfo]",
        "index" : {
          "enabled" : false,
          "indexName" : "",
          "indexValue" : ""
        }
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "test",
      "connection" : "sqlite",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select * from \"test\""
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "ParamByDynamicRef",
      "connection" : "sqliteParamTest",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select '{{Connection.sqliteParamTest.read[0].Param}}' as 'values'"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Static",
        "params" : [ {
          "name" : "param",
          "pattern" : "DEFAULT"
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "param",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "DEFAULT",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "ReturnParams",
      "connection" : "sqliteParamTest",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select '{{this.param}}' as 'param'"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Static",
        "params" : [ {
          "name" : "param",
          "pattern" : "DEFAULT,VALUE"
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "param",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "DEFAULT",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "drop",
      "connection" : "sqliteParamTest",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "drop table IF EXISTS StagePipelineCommaParam"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "read",
      "connection" : "sqliteParamTest",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "query" : "select * from StagePipelineCommaParam"
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "dynref",
      "connection" : "webh",
      "type" : "rest.client",
      "qualifier" : {
        "acceptType" : "*/*",
        "method" : "POST",
        "contentType" : "application/json",
        "includeMetadata" : false,
        "endpointURL" : "/",
        "body" : "{{Connection.cratejdbc.test[0].col1}}",
        "isFile" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    }, {
      "name" : "param",
      "connection" : "webh",
      "type" : "rest.client",
      "qualifier" : {
        "acceptType" : "*/*",
        "method" : "POST",
        "contentType" : "application/json",
        "includeMetadata" : false,
        "endpointURL" : "/",
        "body" : "{{this.param}}",
        "isFile" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "param",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "param",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : "default",
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "test",
      "connection" : "webh",
      "type" : "rest.client",
      "qualifier" : {
        "acceptType" : "*/*",
        "method" : "POST",
        "contentType" : "application/json",
        "includeMetadata" : false,
        "body" : "{{this.p}}",
        "endpointURL" : "/",
        "isFile" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "p",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "p",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "defaultValue" : 2,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "testArray",
      "connection" : "webh",
      "type" : "rest.client",
      "qualifier" : {
        "acceptType" : "*/*",
        "method" : "POST",
        "contentType" : "application/json",
        "includeMetadata" : false,
        "endpointURL" : "/",
        "body" : "{{this.p}}",
        "isFile" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off",
        "params" : [ {
          "name" : "p",
          "pattern" : ""
        } ]
      },
      "parameters" : {
        "type" : "inline",
        "model" : {
          "name" : "params",
          "tags" : [ ],
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "p",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        }
      }
    }, {
      "name" : "test",
      "connection" : "wh",
      "type" : "webhook.server",
      "qualifier" : {
        "includeMetadata" : false
      },
      "cacheLifetime" : {
        "enabled" : false
      },
      "template" : {
        "type" : "Off"
      },
      "parameters" : {
        "type" : "EmptyParameters"
      }
    } ],
    "outputs" : [ {
      "name" : "test",
      "connection" : "MsiMessages",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "off",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "test"
      }
    }, {
      "name" : "PostMessage",
      "connection" : "MsiRESTClient",
      "type" : "rest.client",
      "qualifier" : {
        "method" : "POST",
        "bodyType" : "raw",
        "breakupArrays" : false,
        "endpointURL" : "/PostMessage",
        "template" : "${value[1..value?length - 2]}",
        "header" : [ {
          "name" : "Content-Type",
          "value" : "application/xml"
        } ]
      }
    }, {
      "name" : "test",
      "connection" : "crate",
      "type" : "rest.client",
      "qualifier" : {
        "method" : "POST",
        "bodyType" : "defaultjson",
        "breakupArrays" : false,
        "endpointURL" : "/_sql",
        "filterList" : [ "_timestamp", "_name", "_model" ]
      }
    }, {
      "name" : "test",
      "connection" : "cratejdbc",
      "type" : "jdbc",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "off",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "mytablename",
        "whereColumn" : "",
        "logAsJSON" : false,
        "filterList" : [ "_timestamp", "_model", "_name" ]
      }
    }, {
      "name" : "test",
      "connection" : "crateps",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "create_and_update",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "testtable1",
        "whereColumn" : "",
        "logAsJSON" : false,
        "filterList" : [ "_timestamp", "_model", "_name", "_id" ]
      }
    }, {
      "name" : "testtable",
      "connection" : "crateps",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "create_and_update",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "doc.testtable",
        "whereColumn" : "",
        "logAsJSON" : false
      }
    }, {
      "name" : "testtable1",
      "connection" : "crateps",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "off",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "doc.testtable1",
        "filterList" : [ "_timestamp", "_name", "_model" ],
        "whereColumn" : "",
        "logAsJSON" : false
      }
    }, {
      "name" : "test",
      "connection" : "cratetimescale",
      "type" : "jdbc.timescaledb",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "create",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "testtable123",
        "createHypertable" : true,
        "filterList" : [ "_id", "_model", "_name", "_timestamp" ],
        "partitionType" : "integer",
        "partitionInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "partitionBy" : "testhyper",
        "partitionNumber" : 1
      }
    }, {
      "name" : "test",
      "connection" : "file",
      "type" : "file",
      "qualifier" : {
        "breakupArrays" : false,
        "fileName" : "test.txt"
      }
    }, {
      "name" : "test",
      "connection" : "hmq",
      "type" : "mqtt",
      "qualifier" : {
        "qos" : 0,
        "namedRoot" : false,
        "breakupArrays" : false,
        "topic" : "test"
      }
    }, {
      "name" : "test",
      "connection" : "ig",
      "type" : "inductive.ignition",
      "qualifier" : {
        "breakupArrays" : false,
        "tagAddress" : "[HighByte]test",
        "create" : true
      }
    }, {
      "name" : "test",
      "connection" : "mqtt",
      "type" : "mqtt",
      "qualifier" : {
        "qos" : 0,
        "namedRoot" : false,
        "breakupArrays" : false,
        "topic" : "test"
      }
    }, {
      "name" : "Motor001",
      "connection" : "opc",
      "type" : "opc.tcp",
      "qualifier" : {
        "namespaceIndex" : 2,
        "identifierType" : "String",
        "identifier" : "Motor001",
        "dataType" : "Auto",
        "type" : "Branch",
        "maxDepth" : 1,
        "cacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "ignoreBadQuality" : false,
        "browseVariableNodes" : false,
        "namedRoot" : false
      }
    }, {
      "name" : "createtablewrite",
      "connection" : "pgcog",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "off",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "createtable",
        "whereColumn" : "",
        "logAsJSON" : false
      }
    }, {
      "name" : "testtable",
      "connection" : "pgcog",
      "type" : "jdbc.postgresql",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "create",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "public.testtable2",
        "whereColumn" : "",
        "logAsJSON" : false,
        "filterList" : [ "_timestamp", "_model", "_name" ]
      }
    }, {
      "name" : "test",
      "connection" : "sqlite",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "create",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "test",
        "whereColumn" : "",
        "logAsJSON" : false
      }
    }, {
      "name" : "CommaTable",
      "connection" : "sqliteParamTest",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "create",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "CommaTable",
        "whereColumn" : "",
        "logAsJSON" : false
      }
    }, {
      "name" : "test",
      "connection" : "testsqlite",
      "type" : "jdbc.sqlite",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "create",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "test"
      }
    }, {
      "name" : "test",
      "connection" : "ts",
      "type" : "jdbc.timescaledb",
      "qualifier" : {
        "writeType" : "insert",
        "createOption" : "create_and_update",
        "tableCacheInterval" : {
          "duration" : 1,
          "units" : "Hours"
        },
        "breakupArrays" : false,
        "table" : "TestTableHyperInt",
        "createHypertable" : true,
        "partitionType" : "integer",
        "partitionInterval" : {
          "duration" : 1,
          "units" : "Minutes"
        },
        "partitionNumber" : 3,
        "partitionBy" : "col1",
        "filterList" : [ ]
      }
    } ],
    "modeling" : {
      "models" : [ {
        "name" : "CrateCreateTable",
        "tags" : [ "WriteToCrate" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "col1",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "defaultValue" : 123,
          "internalType" : "String"
        }, {
          "attributeType" : "Internal",
          "name" : "col2",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "defaultValue" : 123,
          "internalType" : "Int64"
        } ]
      }, {
        "name" : "Injection",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "Pressure",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "Temperature",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "Cycles",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "MsiOrderParameterMessage",
        "tags" : [ "PAS_X_MSI" ],
        "attributes" : [ {
          "attributeType" : "Object",
          "name" : "MsiOrderParameterMessage",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "messageInstanceId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "direction",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "messageId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "supplierId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "deviceTypeId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "supplierVersion",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Real64"
          }, {
            "attributeType" : "Internal",
            "name" : "functionalId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "orderContext",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "creationTime",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Modeled",
            "name" : "BatchNo",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "model" : "ParameterString"
          }, {
            "attributeType" : "Modeled",
            "name" : "DeviceNo",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "model" : "ParameterString"
          }, {
            "attributeType" : "Modeled",
            "name" : "Weight",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "model" : "ParameterFloat"
          } ]
        } ]
      }, {
        "name" : "OpenAiHistoryReset",
        "tags" : [ "OpenAiChatHistoryV1" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "status",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "OpenAiInput",
        "tags" : [ "OpenAiChatHistoryV1" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "content",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "role",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "OpenAiModel",
        "tags" : [ "OpenAiChatHistoryV1" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "model",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "OpenAiPrompt",
        "tags" : [ "OpenAiChatHistoryV1" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "prompt",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "instruction",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "model",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "reset",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "OpenAiSelectTable",
        "tags" : [ "OpenAiChatHistoryV1" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "tableName",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "ParameterFloat",
        "tags" : [ "PAS_X_MSI" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "name",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "dataType",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "value",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Real32"
        }, {
          "attributeType" : "Internal",
          "name" : "isQualifier",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "acquisitionTime",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "ParameterString",
        "tags" : [ "PAS_X_MSI" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "name",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "dataType",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "value",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "String"
        }, {
          "attributeType" : "Internal",
          "name" : "isQualifier",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "acquisitionTime",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "Publish",
        "tags" : [ "PAS_X_MSI" ],
        "attributes" : [ {
          "attributeType" : "Object",
          "name" : "MsiMessageContainer",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "messageInstanceId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "direction",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "systemId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "messageType",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "messageContext",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Modeled",
            "name" : "message",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "model" : "MsiOrderParameterMessage"
          } ]
        } ]
      }, {
        "name" : "Request",
        "tags" : [ "PAS_X_MSI" ],
        "attributes" : [ {
          "attributeType" : "Object",
          "name" : "MsiMessageContainer",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "messageInstanceId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "direction",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "systemId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "messageType",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "messageContext",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Modeled",
            "name" : "message",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "model" : "MsiOrderParameterMessage"
          } ]
        } ]
      }, {
        "name" : "StagePipelineCommaParam",
        "tags" : [ "PipelineStageCommaParam" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "Key",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "Param",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "TestCrate",
        "tags" : [ "WriteToCrate" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "col1",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "defaultValue" : "123",
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "col2",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "defaultValue" : 123,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "TransferResult",
        "tags" : [ "PAS_X_MSI" ],
        "attributes" : [ {
          "attributeType" : "Object",
          "name" : "TransferResult",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "attributes" : [ {
            "attributeType" : "Internal",
            "name" : "MsgInstanceId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Any"
          }, {
            "attributeType" : "Internal",
            "name" : "SystemId",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          }, {
            "attributeType" : "Internal",
            "name" : "Success",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "internalType" : "Boolean"
          }, {
            "attributeType" : "Internal",
            "name" : "Error",
            "nullable" : true,
            "required" : false,
            "array" : false,
            "internalType" : "String"
          } ]
        } ]
      }, {
        "name" : "addTimestamp",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "value",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "timestamp",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "dt",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "dt",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "motorModel",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "standardatt1",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "stanadardatt2",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "motors",
        "tags" : [ "starter_solution" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "motorId",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "site",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "area",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "line",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "amps",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "speed",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "vibration",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "error",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "lastServiceDate",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "DateTime"
        }, {
          "attributeType" : "Internal",
          "name" : "lastServiceNotes",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "nestedModel",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Object",
          "name" : "site",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "attributes" : [ {
            "attributeType" : "Object",
            "name" : "area",
            "nullable" : false,
            "required" : false,
            "array" : false,
            "attributes" : [ {
              "attributeType" : "Object",
              "name" : "line",
              "nullable" : false,
              "required" : false,
              "array" : false,
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "motor",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Any"
              } ]
            } ]
          } ]
        } ]
      }, {
        "name" : "test",
        "tags" : [ "PipelineMechanics" ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "att1",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "att2",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        }, {
          "attributeType" : "Internal",
          "name" : "att3",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      }, {
        "name" : "testInit",
        "tags" : [ ],
        "attributes" : [ {
          "attributeType" : "Internal",
          "name" : "test",
          "nullable" : false,
          "required" : false,
          "array" : false,
          "internalType" : "Any"
        } ]
      } ],
      "instances" : [ {
        "name" : "Injection1",
        "tags" : [ ],
        "model" : "Injection",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "Pressure",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "INJECT1_InjectionMolding1",
              "params" : { },
              "pick" : ".MainCylinderPressure",
              "connectionName" : "Tutorial_OPC_UA"
            }
          }
        }, {
          "name" : "Temperature",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "INJECT1_InjectionMolding1",
              "params" : { },
              "pick" : ".injectmold1temp",
              "connectionName" : "Tutorial_OPC_UA"
            }
          }
        }, {
          "name" : "Cycles",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "INJECT1_InjectionMolding1",
              "params" : { },
              "pick" : ".CycleTime",
              "connectionName" : "Tutorial_OPC_UA"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "dt_Instance",
        "tags" : [ ],
        "model" : "dt",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "dt",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "System",
              "name" : "Internal",
              "params" : { },
              "pick" : "",
              "source" : "DateTime"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "motor001",
        "tags" : [ "starter_solution" ],
        "model" : "motors",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "motorId",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          },
          "defaultValue" : "motor001"
        }, {
          "name" : "site",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          },
          "defaultValue" : "Portland"
        }, {
          "name" : "area",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          },
          "defaultValue" : "Area-1"
        }, {
          "name" : "line",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          },
          "defaultValue" : "Line-1"
        }, {
          "name" : "amps",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "Motor001_PLC_Amps",
              "params" : { },
              "pick" : "",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "speed",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "Motor001_PLC_Speed",
              "params" : { },
              "pick" : "",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "vibration",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "Motor001_PLC_Vibration",
              "params" : { },
              "pick" : "",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "error",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "Motor001_PLC_Error",
              "params" : { },
              "pick" : "",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "lastServiceDate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "get_motor001_service_info",
              "params" : { },
              "pick" : "[0].lastservicedate",
              "connectionName" : "sql"
            }
          }
        }, {
          "name" : "lastServiceNotes",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "get_motor001_service_info",
              "params" : { },
              "pick" : "[0].Notes",
              "connectionName" : "sql"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "motorXXX",
        "tags" : [ "starter_solution" ],
        "model" : "motors",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Static",
          "params" : [ {
            "name" : "number",
            "pattern" : "003"
          }, {
            "name" : "metric",
            "pattern" : "Amps"
          } ]
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "motorId",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          },
          "defaultValue" : "motor001"
        }, {
          "name" : "site",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          },
          "defaultValue" : "Portland"
        }, {
          "name" : "area",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "BUILD1",
              "params" : { },
              "pick" : "",
              "connectionName" : "opc"
            }
          },
          "defaultValue" : "Area-1"
        }, {
          "name" : "line",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "BUILD1",
              "params" : { },
              "pick" : "",
              "connectionName" : "opc"
            }
          },
          "defaultValue" : "Line-1"
        }, {
          "name" : "amps",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "MotorXXX_PLC_XXX",
              "params" : {
                "number" : "{{this.number}}",
                "metric" : "{{this.metric}}"
              },
              "pick" : "",
              "connectionName" : "opc"
            }
          }
        }, {
          "name" : "speed",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          }
        }, {
          "name" : "vibration",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          }
        }, {
          "name" : "error",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          }
        }, {
          "name" : "lastServiceDate",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "get_motor001_service_info",
              "params" : { },
              "pick" : "[0].lastservicedate",
              "connectionName" : "sql"
            }
          }
        }, {
          "name" : "lastServiceNotes",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "get_motor001_service_info",
              "params" : { },
              "pick" : "[0].Notes",
              "connectionName" : "sql"
            }
          }
        } ],
        "parameters" : {
          "type" : "inline",
          "model" : {
            "name" : "params",
            "tags" : [ ],
            "attributes" : [ {
              "attributeType" : "Internal",
              "name" : "number",
              "nullable" : false,
              "required" : false,
              "array" : false,
              "internalType" : "String"
            }, {
              "attributeType" : "Internal",
              "name" : "metric",
              "nullable" : false,
              "required" : false,
              "array" : false,
              "internalType" : "String"
            } ]
          }
        }
      }, {
        "name" : "nestedModel_Instance",
        "tags" : [ ],
        "model" : "nestedModel",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "site",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          },
          "attributes" : [ {
            "name" : "area",
            "expression" : {
              "type" : "Reference",
              "reference" : {
                "type" : "Empty",
                "name" : "",
                "params" : { },
                "pick" : ""
              }
            },
            "attributes" : [ {
              "name" : "line",
              "expression" : {
                "type" : "Reference",
                "reference" : {
                  "type" : "Empty",
                  "name" : "",
                  "params" : { },
                  "pick" : ""
                }
              },
              "attributes" : [ {
                "name" : "motor",
                "expression" : {
                  "type" : "Reference",
                  "reference" : {
                    "type" : "Instance",
                    "name" : "motor001",
                    "params" : { },
                    "pick" : ""
                  }
                }
              } ]
            } ]
          } ]
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "pi",
        "tags" : [ ],
        "model" : "test",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "att1",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "WellDowntimeDemo_West_Texas_param",
              "params" : {
                "p" : "Name: 'West Texas' Parent: ''"
              },
              "pick" : "[0][\"Total Downtime\"]",
              "connectionName" : "piremote"
            }
          }
        }, {
          "name" : "att2",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "WellDowntimeDemo_West_Texas",
              "params" : { },
              "pick" : "[0][\"Avg 30d Downtime\"]",
              "connectionName" : "piremote"
            }
          }
        }, {
          "name" : "att3",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "WellDowntimeDemo_West_Texas",
              "params" : { },
              "pick" : "",
              "connectionName" : "piremote"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "pick",
        "tags" : [ ],
        "model" : "Injection",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "Pressure",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          }
        }, {
          "name" : "Temperature",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          }
        }, {
          "name" : "Cycles",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Input",
              "name" : "test",
              "params" : {
                "p" : "1"
              },
              "pick" : "",
              "connectionName" : "webh"
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "test",
        "tags" : [ ],
        "model" : "test",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off"
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "att1",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "throw new Error(\"test\")\r\nreturn;"
          }
        }, {
          "name" : "att2",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          }
        }, {
          "name" : "att3",
          "expression" : {
            "type" : "Reference",
            "reference" : {
              "type" : "Empty",
              "name" : "",
              "params" : { },
              "pick" : ""
            }
          }
        } ],
        "parameters" : {
          "type" : "EmptyParameters"
        }
      }, {
        "name" : "testInit_Instance",
        "tags" : [ ],
        "model" : "testInit",
        "rootValueAs" : "Object",
        "template" : {
          "type" : "Off",
          "params" : [ {
            "name" : "p",
            "pattern" : ""
          } ]
        },
        "executeMode" : "V4",
        "initExpression" : "",
        "attributes" : [ {
          "name" : "test",
          "expression" : {
            "type" : "JavaScript",
            "expression" : "//let x1 = 234;\r\nlet obj = {\"p\":123};\r\nreturn `{{Connection.webh.test(${obj})}}`;"
          }
        } ],
        "parameters" : {
          "type" : "inline",
          "model" : {
            "name" : "params",
            "tags" : [ ],
            "attributes" : [ {
              "attributeType" : "Internal",
              "name" : "p",
              "nullable" : false,
              "required" : false,
              "array" : false,
              "defaultValue" : 1,
              "internalType" : "String"
            } ]
          }
        }
      } ]
    },
    "pipelines" : [ {
      "name" : "DbToHttp",
      "tags" : [ ],
      "inputStages" : [ "LoadIndex" ],
      "stages" : [ {
        "name" : "ReadDbWithCycleTime",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "test",
            "params" : { },
            "pick" : "",
            "connectionName" : "sql_mes"
          }
        },
        "outputs" : [ "WriteToHttp" ]
      }, {
        "name" : "LoadIndex",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ "ReadDbWithCycleTime" ]
      }, {
        "name" : "WriteToHttp",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.webh}}",
          "qualifier" : {
            "endpointURL" : "/dmz",
            "method" : "POST",
            "bodyType" : "defaultjson",
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ "UpdateIndex" ]
      }, {
        "name" : "UpdateIndex",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "PolledTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : false,
          "interval" : {
            "duration" : 1,
            "units" : "Seconds"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "DeleteClosedOrderParameterMessages",
      "tags" : [ "PAS_X_MSI" ],
      "inputStages" : [ "ReadClosed" ],
      "stages" : [ {
        "name" : "ReadClosed",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "child",
            "key" : "Closed",
            "reference" : "{{Connection.MsiMessages.ClosedOrderParameterMessages}}"
          } ],
          "inputValueLocation" : "exclude",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "ClosedToRoot" ]
      }, {
        "name" : "DeleteMessages",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "inline",
            "key" : "Source1",
            "reference" : "{{Connection.MsiMessages.DeleteOrderParameterMessages({\"_id\":\"{{event.value._id}}\"})}}"
          } ],
          "inputValueLocation" : "exclude",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ ]
      }, {
        "name" : "Breakup",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "array"
        },
        "outputs" : [ "DeleteMessages" ]
      }, {
        "name" : "ClosedToRoot",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value.Closed);"
        },
        "outputs" : [ "Breakup" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "CronTrigger",
        "display" : {
          "position" : {
            "x" : -419,
            "y" : -1
          }
        },
        "config" : {
          "type" : ".TriggerCron",
          "enabled" : false,
          "logging" : "off",
          "schedule" : "*/30 * * * *",
          "timezone" : "utc"
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "EventModel",
      "tags" : [ ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 210,
            "y" : 8
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Instance",
            "name" : "motor001",
            "params" : { },
            "pick" : ""
          }
        },
        "outputs" : [ "Transform" ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 718,
            "y" : 68
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event);"
        },
        "outputs" : [ "Transform_1" ]
      }, {
        "name" : "Transform_1",
        "display" : {
          "position" : {
            "x" : 1133,
            "y" : 108
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "HttpToDatalake",
      "tags" : [ ],
      "inputStages" : [ "LoadPreviousRecord" ],
      "stages" : [ {
        "name" : "ReturnHttpResponse",
        "display" : {
          "position" : {
            "x" : 1588,
            "y" : 241
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "ReadERP",
        "display" : {
          "position" : {
            "x" : -218,
            "y" : 233
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "test",
            "params" : { },
            "pick" : "",
            "connectionName" : "wh"
          }
        },
        "outputs" : [ "ModelPayload" ]
      }, {
        "name" : "ModelPayload",
        "display" : {
          "position" : {
            "x" : 235,
            "y" : 243
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "motorModel",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "standardatt1",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          }, {
            "name" : "stanadardatt2",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          } ]
        },
        "outputs" : [ "WriteToDataLake" ]
      }, {
        "name" : "WriteToDataLake",
        "display" : {
          "position" : {
            "x" : 680,
            "y" : 245
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.blob}}",
          "qualifier" : {
            "containerName" : "test",
            "utcTimePathPrefix" : false,
            "breakupArrays" : false,
            "blobName" : "test"
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ "UpdateNewRecord" ]
      }, {
        "name" : "Breakup",
        "display" : {
          "position" : {
            "x" : 1106,
            "y" : -3
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "array"
        },
        "outputs" : [ "ReadERP" ]
      }, {
        "name" : "CheckIfNew",
        "display" : {
          "position" : {
            "x" : 664,
            "y" : -1
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.value)",
            "outputs" : [ "Breakup" ],
            "description" : "Value Is True"
          }, {
            "expression" : "return true",
            "outputs" : [ ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "LoadPreviousRecord",
        "display" : {
          "position" : {
            "x" : 246,
            "y" : 2
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ "CheckIfNew" ]
      }, {
        "name" : "UpdateNewRecord",
        "display" : {
          "position" : {
            "x" : 1121,
            "y" : 245
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ "ReturnHttpResponse" ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : false,
          "parameters" : {
            "type" : "EmptyParameters"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "InitBlock",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Instance",
            "name" : "testInit_Instance",
            "params" : {
              "p" : "{{event.value}}"
            },
            "pick" : ""
          }
        },
        "outputs" : [ "Transform_1" ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "event.value=123;\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "Read" ]
      }, {
        "name" : "Transform_1",
        "display" : {
          "position" : {
            "x" : 1226,
            "y" : 63
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "NamespaceNodeReadsToUNS",
      "tags" : [ ],
      "inputStages" : [ "SmartQuery" ],
      "stages" : [ {
        "name" : "SmartQuery",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".SmartQueryConfig",
          "query" : {
            "from" : [ "Site1.**" ],
            "where" : "",
            "select" : {
              "what" : [ "value" ],
              "as" : "Hierarchy",
              "delim" : "/"
            }
          },
          "breakup" : true
        },
        "outputs" : [ "Flatten" ]
      }, {
        "name" : "Breakup",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "object"
        },
        "outputs" : [ "ToUNS" ]
      }, {
        "name" : "ToUNS",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.Tutorial_MQTT}}",
          "qualifier" : {
            "topic" : "UNS/{{event.metadata.breakupName}}",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : true,
            "breakupArrays" : false,
            "filterList" : [ "_timestamp" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ ]
      }, {
        "name" : "Flatten",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".FlattenConfig",
          "delimiter" : "/"
        },
        "outputs" : [ "Breakup" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "PolledTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : true,
          "interval" : {
            "duration" : 10,
            "units" : "Seconds"
          }
        }
      }, {
        "name" : "ApiTrigger",
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "EmptyParameters"
          }
        }
      }, {
        "name" : "CallableTrigger",
        "config" : {
          "type" : ".TriggerCallable",
          "enabled" : true
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "OpenAiHistory",
      "tags" : [ "OpenAiChatHistoryV1" ],
      "inputStages" : [ "Switch" ],
      "stages" : [ {
        "name" : "FilterOpenAiHistoryInput",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "exclude",
          "filterList" : [ {
            "filterType" : "exactPathFilter",
            "filterText" : "prompt"
          }, {
            "filterType" : "exactPathFilter",
            "filterText" : "model"
          }, {
            "filterType" : "exactPathFilter",
            "filterText" : "id"
          }, {
            "filterType" : "exactPathFilter",
            "filterText" : "role"
          } ],
          "retainAsMetadata" : true,
          "metadataKey" : "OpenAiHistoryInput"
        },
        "outputs" : [ "ModelPrompt" ]
      }, {
        "name" : "AddResponseToDb",
        "display" : {
          "position" : {
            "x" : 4274,
            "y" : -137
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.SqliteOpenAiHistory}}",
          "qualifier" : {
            "table" : "{{event.metadata.OpenAiHistoryInput.id}}",
            "writeType" : "insert",
            "whereColumn" : "",
            "logAsJSON" : false,
            "createOption" : "off",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false,
            "filterList" : [ "_name", "_model", "_timestamp" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "ModelPrompt",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiInput",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "content",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.OpenAiHistoryInput.prompt;"
            }
          }, {
            "name" : "role",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.OpenAiHistoryInput.role;"
            }
          } ]
        },
        "outputs" : [ "WritePromptToDb" ]
      }, {
        "name" : "WritePromptToDb",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.SqliteOpenAiHistory}}",
          "qualifier" : {
            "table" : "{{event.metadata.OpenAiHistoryInput.id}}",
            "writeType" : "insert",
            "whereColumn" : "",
            "logAsJSON" : false,
            "createOption" : "create",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false,
            "filterList" : [ "_timestamp", "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ "ModelSelectTable" ]
      }, {
        "name" : "SendPromptToLlm",
        "display" : {
          "position" : {
            "x" : 2940,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "chat_dynRef",
            "params" : {
              "model" : "{{event.metadata.OpenAiHistoryInput.model}}"
            },
            "pick" : "",
            "connectionName" : "ollamaRest"
          }
        },
        "outputs" : [ "ModelResponse" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 5157,
            "y" : -135
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "ModelResponse",
        "display" : {
          "position" : {
            "x" : 3390,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiInput",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "content",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.choices[0].message.content;"
            }
          }, {
            "name" : "role",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.choices[0].message.role;"
            }
          } ]
        },
        "outputs" : [ "CheckHasReply" ]
      }, {
        "name" : "Switch",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.value.role===\"user\" || event.value.role===\"system\")",
            "outputs" : [ "FilterOpenAiHistoryInput" ],
            "description" : "Value Is True"
          }, {
            "expression" : "return true",
            "outputs" : [ "ErrorUserOrSystem" ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "ErrorUserOrSystem",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".ErrorConfig",
          "errorMessage" : "Role must be \"user\" or \"system\"."
        },
        "outputs" : [ ]
      }, {
        "name" : "SetSelectTable",
        "display" : {
          "position" : {
            "x" : 2490,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.SqliteOpenAiHistory}}",
          "qualifier" : {
            "table" : "SelectTable",
            "writeType" : "upsert",
            "whereColumn" : "_id = 1",
            "logAsJSON" : false,
            "createOption" : "create",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false,
            "filterList" : [ "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ "SendPromptToLlm" ]
      }, {
        "name" : "ModelSelectTable",
        "display" : {
          "position" : {
            "x" : 2040,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiSelectTable",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "tableName",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.OpenAiHistoryInput.id;"
            }
          } ]
        },
        "outputs" : [ "SetSelectTable" ]
      }, {
        "name" : "CheckHasReply",
        "display" : {
          "position" : {
            "x" : 3840,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.value.content)",
            "outputs" : [ "AddResponseToDb" ],
            "description" : "Value Is True"
          }, {
            "expression" : "return true",
            "outputs" : [ "SystemResponse" ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "UserResponse",
        "display" : {
          "position" : {
            "x" : 4707,
            "y" : -250
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiHistoryReset",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "status",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.content;"
            }
          } ]
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "SystemResponse",
        "display" : {
          "position" : {
            "x" : 4698,
            "y" : 10
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiHistoryReset",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "status",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return \"No response for system prompt\";"
            }
          } ]
        },
        "outputs" : [ "Return" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "prompt",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              }, {
                "attributeType" : "Internal",
                "name" : "model",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              }, {
                "attributeType" : "Internal",
                "name" : "role",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              }, {
                "attributeType" : "Internal",
                "name" : "id",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "OpenAiHistoryReset",
      "tags" : [ "OpenAiChatHistoryV1" ],
      "inputStages" : [ "MergeRead" ],
      "stages" : [ {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "StatusResponse",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiHistoryReset",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "status",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return `History cleared for id: ${event.value.id}`"
            }
          } ]
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "MergeRead",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "child",
            "key" : "Source1",
            "reference" : "{{Connection.SqliteOpenAiHistory.ClearTableParam({\"tableName\":\"{{event.value.id}}\"})}}"
          } ],
          "inputValueLocation" : "inline",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "StatusResponse" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "id",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Any"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "OpenAiHistorybak",
      "tags" : [ ],
      "inputStages" : [ "Switch" ],
      "stages" : [ {
        "name" : "FilterOpenAiHistoryInput",
        "display" : {
          "position" : {
            "x" : 795,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "exclude",
          "filterList" : [ {
            "filterType" : "exactPathFilter",
            "filterText" : "prompt"
          }, {
            "filterType" : "exactPathFilter",
            "filterText" : "model"
          }, {
            "filterType" : "exactPathFilter",
            "filterText" : "id"
          }, {
            "filterType" : "exactPathFilter",
            "filterText" : "role"
          } ],
          "retainAsMetadata" : true,
          "metadataKey" : "OpenAiHistoryInput"
        },
        "outputs" : [ "ModelPrompt" ]
      }, {
        "name" : "AddResponseToDb",
        "display" : {
          "position" : {
            "x" : 3945,
            "y" : -157
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.SqliteOpenAiHistory}}",
          "qualifier" : {
            "table" : "{{event.metadata.OpenAiHistoryInput.id}}",
            "writeType" : "insert",
            "whereColumn" : "",
            "logAsJSON" : false,
            "createOption" : "off",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false,
            "filterList" : [ "_name", "_model", "_timestamp" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "ModelPrompt",
        "display" : {
          "position" : {
            "x" : 1245,
            "y" : -157
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiInput",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "content",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.OpenAiHistoryInput.prompt;"
            }
          }, {
            "name" : "role",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.OpenAiHistoryInput.role;"
            }
          } ]
        },
        "outputs" : [ "WritePromptToDb" ]
      }, {
        "name" : "CheckFirstRun",
        "display" : {
          "position" : {
            "x" : 345,
            "y" : 405
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.value===1)",
            "outputs" : [ "ModelInstructionPrompt" ],
            "description" : "First Run"
          }, {
            "expression" : "return Boolean(event.value===0)",
            "outputs" : [ ],
            "description" : "Not First Run"
          }, {
            "expression" : "return true",
            "outputs" : [ ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "GetFirstRunFlag",
        "display" : {
          "position" : {
            "x" : -105,
            "y" : 405
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const firstRunFlag = state.pipeline.get('firstRun',1);\r\nstage.setValue(firstRunFlag);"
        },
        "outputs" : [ "CheckFirstRun" ]
      }, {
        "name" : "SetFirstRunFlag",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 877
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "state.pipeline.set('firstRun',0);"
        },
        "outputs" : [ ]
      }, {
        "name" : "WriteSystemPrompToDb",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 1012
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.SqliteOpenAiHistory}}",
          "qualifier" : {
            "table" : "ChatHistory",
            "writeType" : "insert",
            "whereColumn" : "",
            "logAsJSON" : false,
            "createOption" : "create",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false,
            "filterList" : [ "_timestamp", "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ ]
      }, {
        "name" : "WritePromptToDb",
        "display" : {
          "position" : {
            "x" : 1695,
            "y" : -157
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.SqliteOpenAiHistory}}",
          "qualifier" : {
            "table" : "{{event.metadata.OpenAiHistoryInput.id}}",
            "writeType" : "insert",
            "whereColumn" : "",
            "logAsJSON" : false,
            "createOption" : "create",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false,
            "filterList" : [ "_timestamp", "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ "ModelSelectTable" ]
      }, {
        "name" : "ModelInstructionPrompt",
        "display" : {
          "position" : {
            "x" : 795,
            "y" : 405
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiInput",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "content",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.OpenAiHistoryInput.instruction;"
            }
          }, {
            "name" : "role",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return \"system\";"
            }
          } ]
        },
        "outputs" : [ "CreateTable" ]
      }, {
        "name" : "CheckReset",
        "display" : {
          "position" : {
            "x" : 345,
            "y" : -202
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.value.reset===true)",
            "outputs" : [ "ClearTable" ],
            "description" : "Reset"
          }, {
            "expression" : "return true",
            "outputs" : [ "ModelPrompt" ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "ResetFirstRun",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 405
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "state.pipeline.set(\"firstRun\",1);"
        },
        "outputs" : [ "GetFirstRunFlag" ]
      }, {
        "name" : "SendPromptToLlm",
        "display" : {
          "position" : {
            "x" : 3045,
            "y" : -157
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "chat_dynRef",
            "params" : {
              "model" : "{{event.metadata.OpenAiHistoryInput.model}}"
            },
            "pick" : "",
            "connectionName" : "ollamaRest"
          }
        },
        "outputs" : [ "ModelResponse" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 4395,
            "y" : -157
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "CheckModelExists",
        "display" : {
          "position" : {
            "x" : 345,
            "y" : 135
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.metadata.OpenAiHistoryInput.model)",
            "outputs" : [ ],
            "description" : "Value Is True"
          }, {
            "expression" : "return true",
            "outputs" : [ ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "SetModel",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 1147
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.SqliteOpenAiHistory}}",
          "qualifier" : {
            "writeType" : "upsert",
            "whereColumn" : "_id=1",
            "logAsJSON" : false,
            "createOption" : "create",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false,
            "table" : "SetModel",
            "filterList" : [ "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ ]
      }, {
        "name" : "CreateTable",
        "display" : {
          "position" : {
            "x" : 1245,
            "y" : 405
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "inline",
            "key" : "Source1",
            "reference" : "{{Connection.SqliteOpenAiHistory.CreateTable}}"
          } ],
          "inputValueLocation" : "inline",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ ]
      }, {
        "name" : "ModelResponse",
        "display" : {
          "position" : {
            "x" : 3495,
            "y" : -157
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiInput",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "content",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.choices[0].message.content;"
            }
          }, {
            "name" : "role",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.choices[0].message.role;"
            }
          } ]
        },
        "outputs" : [ "AddResponseToDb" ]
      }, {
        "name" : "SetInputDefaults",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 270
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiPrompt",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "prompt",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.prompt;"
            }
          }, {
            "name" : "instruction",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "if (event.value.instruction===\"45245\"){\r\n    delete event.value.instruction;\r\n} else{\r\n    return event.value.instruction;\r\n};"
            }
          }, {
            "name" : "model",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.model;"
            }
          }, {
            "name" : "reset",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "const value = event.value.reset;\r\nif (value===\"45245\"){\r\n    delete event.value.reset;\r\n} else {\r\n    return value;\r\n};\r\n/*\r\nif (value !== 0 && value !== 1) {\r\n    throw new Error('reset must be 0 or 1 if provided');\r\n} else {\r\n    return value;\r\n};\r\n*/"
            }
          } ]
        },
        "outputs" : [ "CheckResetExists" ]
      }, {
        "name" : "CheckInstructionExists",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 1282
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean( event.value.instruction!==\"45245\" && event.value.reset===true )",
            "outputs" : [ ],
            "description" : "Good Case"
          }, {
            "expression" : "return true",
            "outputs" : [ ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "Error_1",
        "display" : {
          "position" : {
            "x" : -105,
            "y" : 540
          }
        },
        "config" : {
          "type" : ".ErrorConfig",
          "errorMessage" : "Reset must be \"yes\" or \"no\" if provided"
        },
        "outputs" : [ ]
      }, {
        "name" : "ValidateReset",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 540
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "const body = event.value;\r\nreturn Boolean(body.reset === true || body.reset === false)\r\n//(event.value === \"0\" && event.value === \"1\")",
            "outputs" : [ ],
            "description" : "Good Case"
          }, {
            "expression" : "return true",
            "outputs" : [ "Error_1" ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "HasInstructionNoReset",
        "display" : {
          "position" : {
            "x" : -105,
            "y" : 675
          }
        },
        "config" : {
          "type" : ".ErrorConfig",
          "errorMessage" : "Reset must be \"yes\" if Instruction is provided."
        },
        "outputs" : [ ]
      }, {
        "name" : "CheckResetExists",
        "display" : {
          "position" : {
            "x" : -105,
            "y" : 270
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean('reset' in event.value)",
            "outputs" : [ ],
            "description" : "Good Case"
          }, {
            "expression" : "return true",
            "outputs" : [ ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "ValidateInstructionReset",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 742
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.value.instruction===\"45245\" && event.value.reset===false)",
            "outputs" : [ ],
            "description" : "No Instruction No Reset"
          }, {
            "expression" : "return Boolean(event.value.instruction!==\"45245\" && event.value.reset===true)",
            "outputs" : [ ],
            "description" : "Has Instruction Has Reset"
          }, {
            "expression" : "return Boolean(event.value.instruction!==\"45245\" && event.value.reset===false)",
            "outputs" : [ "HasInstructionNoReset" ],
            "description" : "Has Instruction No Reset"
          }, {
            "expression" : "return Boolean(event.value.instruction===\"45245\" && event.value.reset===true)",
            "outputs" : [ "NoInstructionHasReset" ],
            "description" : "No Instruction Has Reset"
          }, {
            "expression" : "return true",
            "outputs" : [ "ValidateInstructionResetDefaultError" ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "ModelTableSchema",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 135
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiModel",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "model",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.OpenAiHistoryInput.model;"
            }
          } ]
        },
        "outputs" : [ "OnChange" ]
      }, {
        "name" : "NoInstructionHasReset",
        "display" : {
          "position" : {
            "x" : -105,
            "y" : 810
          }
        },
        "config" : {
          "type" : ".ErrorConfig",
          "errorMessage" : "Instruction must be provided if Reset is true"
        },
        "outputs" : [ ]
      }, {
        "name" : "ValidateInstructionResetDefaultError",
        "display" : {
          "position" : {
            "x" : -105,
            "y" : 945
          }
        },
        "config" : {
          "type" : ".ErrorConfig",
          "errorMessage" : "Error ValidateInstructionReset"
        },
        "outputs" : [ ]
      }, {
        "name" : "OnChange",
        "display" : {
          "position" : {
            "x" : -105,
            "y" : 135
          }
        },
        "config" : {
          "type" : ".OnChangeConfig",
          "outputMode" : "changed",
          "persistMode" : "memory",
          "keyExpression" : "stage.setBufferKey(null);",
          "inclusionList" : [ ],
          "metadataKey" : "bufferKey",
          "trackChanges" : [ ],
          "ignoreChanges" : [ ]
        },
        "outputs" : [ "CheckModelExists" ]
      }, {
        "name" : "ClearTable",
        "display" : {
          "position" : {
            "x" : 795,
            "y" : -247
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "ClearTableParam",
            "params" : {
              "tableName" : "{{event.metadata.OpenAiHistoryInput.id}}"
            },
            "pick" : "",
            "connectionName" : "SqliteOpenAiHistory"
          }
        },
        "outputs" : [ "ModelPrompt" ]
      }, {
        "name" : "Switch",
        "display" : {
          "position" : {
            "x" : 345,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.value.role===\"user\" || event.value.role===\"system\")",
            "outputs" : [ "FilterOpenAiHistoryInput" ],
            "description" : "Value Is True"
          }, {
            "expression" : "return true",
            "outputs" : [ "ErrorUserOrSystem" ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "ErrorUserOrSystem",
        "display" : {
          "position" : {
            "x" : 795,
            "y" : 135
          }
        },
        "config" : {
          "type" : ".ErrorConfig",
          "errorMessage" : "Role must be \"user\" or \"system\"."
        },
        "outputs" : [ ]
      }, {
        "name" : "SetSelectTable",
        "display" : {
          "position" : {
            "x" : 2595,
            "y" : -157
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.SqliteOpenAiHistory}}",
          "qualifier" : {
            "table" : "SelectTable",
            "writeType" : "upsert",
            "whereColumn" : "_id = 1",
            "logAsJSON" : false,
            "createOption" : "create",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false,
            "filterList" : [ "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ "SendPromptToLlm" ]
      }, {
        "name" : "ModelSelectTable",
        "display" : {
          "position" : {
            "x" : 2145,
            "y" : -157
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiSelectTable",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "tableName",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.OpenAiHistoryInput.id;"
            }
          } ]
        },
        "outputs" : [ "SetSelectTable" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "prompt",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              }, {
                "attributeType" : "Internal",
                "name" : "model",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              }, {
                "attributeType" : "Internal",
                "name" : "role",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              }, {
                "attributeType" : "Internal",
                "name" : "reset",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "defaultValue" : false,
                "internalType" : "Boolean"
              }, {
                "attributeType" : "Internal",
                "name" : "id",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "String"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "PipelineMechanics",
      "tags" : [ "PipelineMechanics" ],
      "inputStages" : [ "Filter", "SampleMsg_1", "SampleMsg" ],
      "stages" : [ {
        "name" : "SampleMsg",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : -135
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "// set a sample message here\r\nconst msg = \"Hello World!\"\r\n\r\nstage.setValue(msg);\r\n\r\n//I'm not doing anything with the event.value being passed in from the previous stage, so I'm just hard coding the output of this stage as \"Hello World!\""
        },
        "outputs" : [ "Model" ]
      }, {
        "name" : "Model",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : -135
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "test",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "att1",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "// event.value represents the JSON that is going to be worked on. In this case, \"Hello World!\" should be the JSON that is being passed in from the previous stage.\r\nreturn event.value;"
            }
          }, {
            "name" : "att2",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          }, {
            "name" : "att3",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          } ]
        },
        "outputs" : [ "DoNothing" ]
      }, {
        "name" : "DoNothing",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      }, {
        "name" : "Filter",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 135
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "include",
          "filterList" : [ {
            "filterType" : "exactPathFilter",
            "filterText" : "value"
          } ],
          "retainAsMetadata" : true,
          "metadataKey" : "filtered"
        },
        "outputs" : [ "Model_1_1" ]
      }, {
        "name" : "SampleMsg_1",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "// set a sample message here\r\nconst msg = \"Hello World!\"\r\n\r\nstage.setValue(msg);\r\n\r\n//I'm not doing anything with the event.value being passed in from the previous stage, so I'm just hard coding the output of this stage as \"Hello World!\""
        },
        "outputs" : [ "Model_1" ]
      }, {
        "name" : "Model_1",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "test",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "att1",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "// event.value represents the JSON that is going to be worked on. In this case, \"Hello World!\" should be the JSON that is being passed in from the previous stage.\r\nreturn event.value;"
            }
          }, {
            "name" : "att2",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "// the metadata that is generated from the Flow Trigger stage for the relevant template parameter is mapped here:\r\nreturn event.metadata.parameters.num;"
            }
          }, {
            "name" : "att3",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "// the metadata that is generated from the Flow Trigger stage for the relevant template parameter is mapped here:\r\nreturn event.metadata.parameters.metric;"
            }
          } ]
        },
        "outputs" : [ "DoNothing" ]
      }, {
        "name" : "Model_1_1",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 135
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "test",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "att1",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "// here event.value represents the data coming in from the Flow Trigger where the input message from the OPC Input is {value:...,_topic:...,_timestamp:...,etc.}. The parameters other than .value were filtered out in Filter Stage, so only event.value.value remains, which I am querying here.\r\nreturn event.value.value;"
            }
          }, {
            "name" : "att2",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "// the filtered tag from the filter stage is being mapped here. The filter stage let's you specify the property name. the default is .filtered, which is what is being referenced here:\r\nreturn event.metadata.filtered._tagTimestamp;"
            }
          }, {
            "name" : "att3",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "// the filtered tag from the filter stage is being mapped here. The filter stage let's you specify the property name. the default is .filtered, which is what is being referenced here:\r\nreturn event.metadata.filtered._tagName;"
            }
          } ]
        },
        "outputs" : [ "DoNothing" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "FlowTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerFlow",
          "enabled" : true,
          "flowEvaluation" : {
            "type" : "Exception",
            "interval" : {
              "duration" : 1,
              "units" : "Seconds"
            },
            "mode" : "Always",
            "expression" : "{{Connection.OpcPipelineMechanics.Motor001_PLC({\"num\":\"{{this.num}}\",\"metric\":\"{{this.metric}}\"})}}",
            "delay" : {
              "duration" : 0,
              "units" : "Seconds"
            }
          },
          "inReferences" : [ "{{Connection.OpcPipelineMechanics.Motor001_PLC({\"num\":\"{{this.num}}\",\"metric\":\"{{this.metric}}\"})}}" ],
          "publishMode" : "All",
          "template" : {
            "type" : "Static",
            "params" : [ {
              "name" : "num",
              "pattern" : "001-5,001-5,001-5,001-5,001-5"
            }, {
              "name" : "metric",
              "pattern" : "Amps*5,Speed*5,Vibration*5,Error*5,ID*5"
            } ]
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "ProcessMSIRequestAndPublishResult",
      "description" : "Extract batch no. from request payload, forward to sub-pipeline to capture file data, curate result payload and POST back to MSI.",
      "tags" : [ "PAS_X_MSI" ],
      "inputStages" : [ "Messages" ],
      "stages" : [ {
        "name" : "Publish",
        "display" : {
          "position" : {
            "x" : 2040,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "Publish",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "MsiMessageContainer",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            },
            "attributes" : [ {
              "name" : "messageInstanceId",
              "expression" : {
                "type" : "JavaScript",
                "expression" : "return event.value.MsiMessageContainer_messageInstanceId;"
              }
            }, {
              "name" : "direction",
              "expression" : {
                "type" : "JavaScript",
                "expression" : "return \"SF_TO_MES\";"
              }
            }, {
              "name" : "systemId",
              "expression" : {
                "type" : "JavaScript",
                "expression" : "return event.value.MsiMessageContainer_systemId;"
              }
            }, {
              "name" : "messageType",
              "expression" : {
                "type" : "JavaScript",
                "expression" : "return event.value.MsiMessageContainer_messageType;"
              }
            }, {
              "name" : "messageContext",
              "expression" : {
                "type" : "JavaScript",
                "expression" : ""
              }
            }, {
              "name" : "message",
              "expression" : {
                "type" : "JavaScript",
                "expression" : ""
              },
              "attributes" : [ {
                "name" : "MsiOrderParameterMessage",
                "expression" : {
                  "type" : "JavaScript",
                  "expression" : ""
                },
                "attributes" : [ {
                  "name" : "messageInstanceId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_messageInstanceId;"
                  }
                }, {
                  "name" : "direction",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : "return \"SF_TO_MES\";"
                  }
                }, {
                  "name" : "messageId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_messageId;"
                  }
                }, {
                  "name" : "supplierId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_supplierId;"
                  }
                }, {
                  "name" : "deviceTypeId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_deviceTypeId;"
                  }
                }, {
                  "name" : "supplierVersion",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "functionalId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "orderContext",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "creationTime",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : "const date = new Date();\r\nconst pad = (n) => (n < 10 ? '0' + n : n); // Helper function for padding\r\n\r\nconst formattedDate = `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())} ${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())},${date.getMilliseconds()}`\r\n\r\nreturn formattedDate;"
                  }
                }, {
                  "name" : "BatchNo",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  },
                  "attributes" : [ {
                    "name" : "name",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_BatchNo_name;"
                    }
                  }, {
                    "name" : "dataType",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_BatchNo_dataType;"
                    }
                  }, {
                    "name" : "value",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_BatchNo_value;"
                    }
                  }, {
                    "name" : "isQualifier",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return Boolean(event.value.MsiMessageContainer_message_MsiOrderParameterMessage_BatchNo_isQualifier);"
                    }
                  }, {
                    "name" : "acquisitionTime",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_BatchNo_acquisitionTime;"
                    }
                  } ]
                }, {
                  "name" : "DeviceNo",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  },
                  "attributes" : [ {
                    "name" : "name",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_DeviceNo_name;"
                    }
                  }, {
                    "name" : "dataType",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_DeviceNo_dataType;"
                    }
                  }, {
                    "name" : "value",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_DeviceNo_value;"
                    }
                  }, {
                    "name" : "isQualifier",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return Boolean(event.value.MsiMessageContainer_message_MsiOrderParameterMessage_DeviceNo_isQualifier);"
                    }
                  }, {
                    "name" : "acquisitionTime",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return event.value.MsiMessageContainer_message_MsiOrderParameterMessage_DeviceNo_acquisitionTime;"
                    }
                  } ]
                }, {
                  "name" : "Weight",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  },
                  "attributes" : [ {
                    "name" : "name",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return \"Weight\";"
                    }
                  }, {
                    "name" : "dataType",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return \"Double\";"
                    }
                  }, {
                    "name" : "value",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return Math.random() * 10;"
                    }
                  }, {
                    "name" : "isQualifier",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "return true;"
                    }
                  }, {
                    "name" : "acquisitionTime",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : "const date = new Date();\r\nconst pad = (n) => (n < 10 ? '0' + n : n); // Helper function for padding\r\n\r\nconst formattedDate = `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())} ${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())},${date.getMilliseconds()}`\r\n\r\nreturn formattedDate;"
                    }
                  } ]
                } ]
              } ]
            } ]
          } ]
        },
        "outputs" : [ "XMLFormat" ]
      }, {
        "name" : "XMLFormat",
        "display" : {
          "position" : {
            "x" : 2490,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".XMLFormatConfig",
          "outgoingType" : "String"
        },
        "outputs" : [ "Replaces" ]
      }, {
        "name" : "Messages",
        "display" : {
          "position" : {
            "x" : 238,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "child",
            "key" : "Messages",
            "reference" : "{{Connection.MsiMessages.OpenOrderParameterMessages}}"
          } ],
          "inputValueLocation" : "exclude",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "GetMessages" ]
      }, {
        "name" : "Breakup",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "array"
        },
        "outputs" : [ "Filter" ]
      }, {
        "name" : "GetMessages",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value.Messages);"
        },
        "outputs" : [ "Breakup" ]
      }, {
        "name" : "Filter",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "exclude",
          "filterList" : [ {
            "filterType" : "exactPathFilter",
            "filterText" : "_id"
          }, {
            "filterType" : "exactPathFilter",
            "filterText" : "_name"
          }, {
            "filterType" : "exactPathFilter",
            "filterText" : "_timestamp"
          } ],
          "retainAsMetadata" : true,
          "metadataKey" : "filtered"
        },
        "outputs" : [ "Publish", "InprocessStatus" ]
      }, {
        "name" : "ClosedStatus",
        "display" : {
          "position" : {
            "x" : 3840,
            "y" : -135
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const status = { \"status\": \"Closed\" };\r\nstage.setValue(status);"
        },
        "outputs" : [ "SQLite" ]
      }, {
        "name" : "SQLite",
        "display" : {
          "position" : {
            "x" : 4290,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.MsiMessages}}",
          "qualifier" : {
            "table" : "Messages",
            "writeType" : "update",
            "whereColumn" : "_id = {{event.metadata.filtered._id}}",
            "logAsJSON" : false,
            "createOption" : "off",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ ]
      }, {
        "name" : "Replaces",
        "display" : {
          "position" : {
            "x" : 2940,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "let message = event.value;\r\nmessage = message.replace('<MsiMessageContainer>','<MsiMessageContainer xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">');\r\nmessage = message.replace('<MsiOrderParameterMessage>','<MsiOrderParameterMessage xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">');\r\nmessage = message.replace('<BatchNo>','<parameter>');\r\nmessage = message.replace('</BatchNo>','</parameter>');\r\nmessage = message.replace('<DeviceNo>','<parameter>');\r\nmessage = message.replace('</DeviceNo>','</parameter>');\r\nmessage = message.replace('<Weight>','<parameter>');\r\nmessage = message.replace('</Weight>','</parameter>');\r\nstage.setValue(message);"
        },
        "outputs" : [ "PostMessage" ]
      }, {
        "name" : "ErrorStatus",
        "display" : {
          "position" : {
            "x" : 3840,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const status = { \"status\": \"Error\" };\r\nconst errorMessage = { \"errorMessage\": event.metadata.writeResults[0] }\r\nlet payload = {...status,...errorMessage};\r\nstage.setValue(payload);"
        },
        "outputs" : [ "SQLite" ]
      }, {
        "name" : "InprocessStatus",
        "display" : {
          "position" : {
            "x" : 3840,
            "y" : 135
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const status = { \"status\": \"Inprocess\" };\r\nstage.setValue(status);"
        },
        "outputs" : [ "SQLite" ]
      }, {
        "name" : "PostMessage",
        "display" : {
          "position" : {
            "x" : 3390,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".WriteConfig",
          "failureOutputs" : [ "ErrorStatus" ],
          "references" : [ "{{Connection.MsiRESTClient.PostMessage}}" ],
          "writeReturn" : "completion"
        },
        "outputs" : [ "ClosedStatus" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "PolledTrigger",
        "display" : {
          "position" : {
            "x" : -454,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : false,
          "interval" : {
            "duration" : 5,
            "units" : "Seconds"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "ReceiveMSIRequestAndSendAcknowledge",
      "description" : "Capture Request From MSI.\nReply with acknowledgement.\nSave message into SQLite",
      "tags" : [ "PAS_X_MSI" ],
      "inputStages" : [ "XMLParser" ],
      "stages" : [ {
        "name" : "ReturnAck",
        "display" : {
          "position" : {
            "x" : 1569,
            "y" : -137
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "Model",
        "display" : {
          "position" : {
            "x" : 683,
            "y" : -136
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "TransferResult",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "TransferResult",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            },
            "attributes" : [ {
              "name" : "MsgInstanceId",
              "expression" : {
                "type" : "JavaScript",
                "expression" : "return event.value.MsiMessageContainer.messageInstanceId;"
              }
            }, {
              "name" : "SystemId",
              "expression" : {
                "type" : "JavaScript",
                "expression" : "return event.value.MsiMessageContainer.systemId;"
              }
            }, {
              "name" : "Success",
              "expression" : {
                "type" : "JavaScript",
                "expression" : "return true"
              }
            }, {
              "name" : "Error",
              "expression" : {
                "type" : "JavaScript",
                "expression" : ""
              }
            } ]
          } ]
        },
        "outputs" : [ "XMLFormat" ]
      }, {
        "name" : "ConvertArrayParametersToObject",
        "display" : {
          "position" : {
            "x" : 682,
            "y" : 73
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "event.value.MsiMessageContainer.message.MsiOrderParameterMessage.BatchNo = event.value.MsiMessageContainer.message.MsiOrderParameterMessage.parameter[0];\r\nevent.value.MsiMessageContainer.message.MsiOrderParameterMessage.DeviceNo = event.value.MsiMessageContainer.message.MsiOrderParameterMessage.parameter[1];\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "Request" ]
      }, {
        "name" : "Flatten",
        "display" : {
          "position" : {
            "x" : 1546,
            "y" : 77
          }
        },
        "config" : {
          "type" : ".FlattenConfig",
          "delimiter" : "_"
        },
        "outputs" : [ "AddOpenStatus" ]
      }, {
        "name" : "XMLParser",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".XMLParserConfig",
          "failureOutputs" : [ ],
          "incomingType" : "String",
          "encoding" : "Auto"
        },
        "outputs" : [ "ConvertArrayParametersToObject", "Model" ]
      }, {
        "name" : "XMLFormat",
        "display" : {
          "position" : {
            "x" : 1133,
            "y" : -134
          }
        },
        "config" : {
          "type" : ".XMLFormatConfig",
          "outgoingType" : "String"
        },
        "outputs" : [ "ReturnAck" ]
      }, {
        "name" : "Messages",
        "display" : {
          "position" : {
            "x" : 2379,
            "y" : 77
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.MsiMessages}}",
          "qualifier" : {
            "table" : "Messages",
            "writeType" : "insert",
            "whereColumn" : "",
            "logAsJSON" : false,
            "createOption" : "create_and_update",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ ]
      }, {
        "name" : "AddOpenStatus",
        "display" : {
          "position" : {
            "x" : 1946,
            "y" : 77
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const status = { \"status\": \"Open\" };\r\nlet payload = {...event.value,...status};\r\nstage.setValue(payload);"
        },
        "outputs" : [ "Messages" ]
      }, {
        "name" : "Request",
        "display" : {
          "position" : {
            "x" : 1124,
            "y" : 77
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "Request",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "MsiMessageContainer",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.MsiMessageContainer;"
            },
            "attributes" : [ {
              "name" : "messageInstanceId",
              "expression" : {
                "type" : "JavaScript",
                "expression" : ""
              }
            }, {
              "name" : "direction",
              "expression" : {
                "type" : "JavaScript",
                "expression" : ""
              }
            }, {
              "name" : "systemId",
              "expression" : {
                "type" : "JavaScript",
                "expression" : ""
              }
            }, {
              "name" : "messageType",
              "expression" : {
                "type" : "JavaScript",
                "expression" : ""
              }
            }, {
              "name" : "messageContext",
              "expression" : {
                "type" : "JavaScript",
                "expression" : ""
              }
            }, {
              "name" : "message",
              "expression" : {
                "type" : "JavaScript",
                "expression" : ""
              },
              "attributes" : [ {
                "name" : "MsiOrderParameterMessage",
                "expression" : {
                  "type" : "JavaScript",
                  "expression" : ""
                },
                "attributes" : [ {
                  "name" : "messageInstanceId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "direction",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "messageId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "supplierId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "deviceTypeId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "supplierVersion",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "functionalId",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "orderContext",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "creationTime",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  }
                }, {
                  "name" : "BatchNo",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  },
                  "attributes" : [ {
                    "name" : "name",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "dataType",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "value",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "isQualifier",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "acquisitionTime",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  } ]
                }, {
                  "name" : "DeviceNo",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  },
                  "attributes" : [ {
                    "name" : "name",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "dataType",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "value",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "isQualifier",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "acquisitionTime",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  } ]
                }, {
                  "name" : "Weight",
                  "expression" : {
                    "type" : "JavaScript",
                    "expression" : ""
                  },
                  "attributes" : [ {
                    "name" : "name",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "dataType",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "value",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "isQualifier",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  }, {
                    "name" : "acquisitionTime",
                    "expression" : {
                      "type" : "JavaScript",
                      "expression" : ""
                    }
                  } ]
                } ]
              } ]
            } ]
          } ]
        },
        "outputs" : [ "Flatten" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "ApiTrigger",
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : false,
          "parameters" : {
            "type" : "EmptyParameters"
          }
        }
      }, {
        "name" : "CallableTrigger",
        "config" : {
          "type" : ".TriggerCallable",
          "enabled" : false
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "TestThis",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 198,
            "y" : 8
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(this.value.type);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "TestTimeOut",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 216,
            "y" : -114
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\n\r\nsleep(9000); // Blocks for 2 seconds"
        },
        "outputs" : [ "Transform_1" ]
      }, {
        "name" : "Transform_1",
        "display" : {
          "position" : {
            "x" : 618,
            "y" : -135
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\n\r\nsleep(9000); // Blocks for 2 seconds"
        },
        "outputs" : [ "Transform_2" ]
      }, {
        "name" : "Transform_2",
        "display" : {
          "position" : {
            "x" : 993,
            "y" : -103
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\n\r\nsleep(9000); // Blocks for 2 seconds"
        },
        "outputs" : [ "Transform_3" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 1664,
            "y" : 442
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "Transform_3",
        "display" : {
          "position" : {
            "x" : 1365,
            "y" : -291
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\n\r\nsleep(3000); // Blocks for 2 seconds"
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "Transform_2_1",
        "display" : {
          "position" : {
            "x" : 1156,
            "y" : 135
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\n\r\nsleep(9000); // Blocks for 2 seconds"
        },
        "outputs" : [ "Transform_4_1_1" ]
      }, {
        "name" : "Transform_4",
        "display" : {
          "position" : {
            "x" : 267,
            "y" : 128
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\n\r\nsleep(9000); // Blocks for 2 seconds"
        },
        "outputs" : [ "Transform_4_1" ]
      }, {
        "name" : "Transform_4_1",
        "display" : {
          "position" : {
            "x" : 742,
            "y" : 136
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\n\r\nsleep(9000); // Blocks for 2 seconds"
        },
        "outputs" : [ "Transform_2_1" ]
      }, {
        "name" : "Transform_4_1_1",
        "display" : {
          "position" : {
            "x" : 1599,
            "y" : 133
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\n\r\nsleep(9000); // Blocks for 2 seconds"
        },
        "outputs" : [ "Transform_4_1_1_1" ]
      }, {
        "name" : "Transform_4_1_1_1",
        "display" : {
          "position" : {
            "x" : 1045,
            "y" : 336
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\n\r\nsleep(9000); // Blocks for 2 seconds"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "test",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "defaultValue" : 123,
                "internalType" : "Any"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "TestUnixTime",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 227,
            "y" : -15
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const ts = System.Internal.DateTime.getTime();\r\nstage.setValue(ts);"
        },
        "outputs" : [ "Transform_1" ]
      }, {
        "name" : "Transform_1",
        "display" : {
          "position" : {
            "x" : 612,
            "y" : -1
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "WriteToCrate",
      "tags" : [ "WriteToCrate" ],
      "inputStages" : [ "ModelCreateTablePayload" ],
      "stages" : [ {
        "name" : "WriteUsingRest",
        "display" : {
          "position" : {
            "x" : 2490,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.crate}}",
          "qualifier" : {
            "endpointURL" : "/_sql",
            "method" : "POST",
            "bodyType" : "defaultjson",
            "breakupArrays" : false,
            "filterList" : [ "_timestamp", "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ "ReadUsingRest" ]
      }, {
        "name" : "SplitJsonIntoKeysAndValues",
        "display" : {
          "position" : {
            "x" : 2040,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const obj = event.value;//{\"col1\":\"123\",\"col2\":123};\r\nconst tableName = event.name;\r\n\r\nconst columns = Object.keys(obj).join(',');\r\nconst values = Object.values(obj).map(v => \r\n  typeof v === 'string' ? `'${v}'` : v\r\n).join(',');\r\n\r\nconst stmt = `insert into ${tableName} (${columns}) values (${values})`;\r\n\r\nconst result = { stmt };\r\n\r\n// Output: { stmt: \"insert into mytable (col1,col2) values ('123',123)\" }\r\nstage.setValue(result);"
        },
        "outputs" : [ "WriteUsingRest" ]
      }, {
        "name" : "ModelRestPayload",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "TestCrate",
          "objectName" : "{{event.metadata.tableName}}",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "col1",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          }, {
            "name" : "col2",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          } ]
        },
        "outputs" : [ "SplitJsonIntoKeysAndValues" ]
      }, {
        "name" : "CreateTableUsingRest",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.crate}}",
          "qualifier" : {
            "endpointURL" : "/_sql",
            "method" : "POST",
            "bodyType" : "defaultjson",
            "breakupArrays" : false,
            "filterList" : [ "_timestamp", "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ "ModelJdbcPayload", "ModelRestPayload" ]
      }, {
        "name" : "CreateTablePayload",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const obj = event.value;//{\"col1\":\"123\",\"col2\":123};\r\nconst tableName = event.name;\r\n\r\nfunction inferSqlType(value) {\r\n  if (typeof value === 'string') return 'text';\r\n  if (typeof value === 'number' && Number.isInteger(value)) return 'int';\r\n  if (typeof value === 'number') return 'float';\r\n  // Add more type inference as needed\r\n  return 'text';\r\n}\r\n\r\nconst columns = Object.entries(obj)\r\n  .map(([key, value]) => `${key} ${inferSqlType(value)}`)\r\n  .join(', ');\r\n\r\nconst stmt = `create table if not exists ${tableName} (${columns})`;\r\n\r\nconst result = { stmt };\r\nconsole.log(result);\r\n// Output: { stmt: \"create table testtable1 (col1 text, col2 int)\" }\r\nstage.setValue(result);\r\nstage.setMetadata(\"tableName\",tableName);"
        },
        "outputs" : [ "CreateTableUsingRest" ]
      }, {
        "name" : "ModelCreateTablePayload",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "CrateCreateTable",
          "objectName" : "mytablename",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "col1",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          }, {
            "name" : "col2",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          } ]
        },
        "outputs" : [ "CreateTablePayload" ]
      }, {
        "name" : "ReadUsingRest",
        "display" : {
          "position" : {
            "x" : 2940,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "ReadHistory",
            "params" : {
              "tableName" : "{{event.metadata.tableName}}"
            },
            "pick" : "",
            "connectionName" : "crate"
          }
        },
        "outputs" : [ "DoNothing" ]
      }, {
        "name" : "DoNothing",
        "display" : {
          "position" : {
            "x" : 3390,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      }, {
        "name" : "WriteUsingJdbc",
        "display" : {
          "position" : {
            "x" : 2040,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.cratejdbc}}",
          "qualifier" : {
            "writeType" : "insert",
            "whereColumn" : "",
            "logAsJSON" : false,
            "createOption" : "off",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false,
            "table" : "{{event.metadata.tableName}}",
            "filterList" : [ "_timestamp", "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "completion"
        },
        "outputs" : [ "ReadUsingJdbc" ]
      }, {
        "name" : "ReadUsingJdbc",
        "display" : {
          "position" : {
            "x" : 2490,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "ReadParam",
            "params" : {
              "tableName" : "{{event.metadata.tableName}}"
            },
            "pick" : "",
            "connectionName" : "cratejdbc"
          }
        },
        "outputs" : [ "DoNothing2" ]
      }, {
        "name" : "ModelJdbcPayload",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "TestCrate",
          "objectName" : "{{event.metadata.tableName}}",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "col1",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            },
            "defaultValue" : "jdbc"
          }, {
            "name" : "col2",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            },
            "defaultValue" : 234
          } ]
        },
        "outputs" : [ "WriteUsingJdbc" ]
      }, {
        "name" : "DoNothing2",
        "display" : {
          "position" : {
            "x" : 2940,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "checkEvent412",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 300,
            "y" : 45
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "FlowTrigger",
        "display" : {
          "position" : {
            "x" : -416,
            "y" : -34
          }
        },
        "config" : {
          "type" : ".TriggerFlow",
          "enabled" : false,
          "flowEvaluation" : {
            "type" : "Exception",
            "interval" : {
              "duration" : 1,
              "units" : "Seconds"
            },
            "mode" : "Always",
            "expression" : "{{Connection.opc.MotorXXX_PLC_Amps({\"motorNumber\":\"{{this.motorNumber}}\"})}}",
            "delay" : {
              "duration" : 0,
              "units" : "Seconds"
            }
          },
          "inReferences" : [ "{{Connection.opc.MotorXXX_PLC_Amps({\"motorNumber\":\"{{this.motorNumber}}\"})}}" ],
          "publishMode" : "All",
          "template" : {
            "type" : "Static",
            "params" : [ {
              "name" : "motorNumber",
              "pattern" : "001-5"
            } ]
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "checkEventTrigger",
      "tags" : [ ],
      "inputStages" : [ "Transform_1", "MergeRead" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      }, {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "MotorXXX_PLC",
            "params" : {
              "motorNumber" : "001"
            },
            "pick" : "",
            "connectionName" : "opc"
          }
        },
        "outputs" : [ "Transform" ]
      }, {
        "name" : "MergeRead",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "child",
            "key" : "Source1",
            "reference" : "{{Connection.opc.MotorXXX_PLC({\"motorNumber\":\"001\"})}}"
          } ],
          "inputValueLocation" : "exclude",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "Transform" ]
      }, {
        "name" : "Transform_1",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ "Read" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "FlowTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".TriggerFlow",
          "enabled" : false,
          "flowEvaluation" : {
            "type" : "Exception",
            "interval" : {
              "duration" : 1,
              "units" : "Days"
            },
            "mode" : "Always",
            "expression" : "{{Connection.opc.MotorXXX_PLC({\"motorNumber\":\"{{this.motorNumber}}\"})}}",
            "delay" : {
              "duration" : 0,
              "units" : "Seconds"
            }
          },
          "inReferences" : [ "{{Connection.opc.MotorXXX_PLC({\"motorNumber\":\"{{this.motorNumber}}\"})}}" ],
          "publishMode" : "All",
          "template" : {
            "name" : "testFlow",
            "type" : "Static",
            "params" : [ {
              "name" : "motorNumber",
              "pattern" : "001"
            } ]
          }
        }
      }, {
        "name" : "EventTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".TriggerEvent",
          "enabled" : false,
          "reference" : "{{Connection.opc.MotorXXX_PLC}}"
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "conditionread",
      "tags" : [ ],
      "inputStages" : [ "MergeRead", "OnChange" ],
      "stages" : [ {
        "name" : "MergeRead",
        "display" : {
          "position" : {
            "x" : 229,
            "y" : -12
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "child",
            "key" : "Source1",
            "reference" : "{{Condition.isalarm.Connection_opc_Motor001_PLC_Amps}}"
          } ],
          "inputValueLocation" : "inline",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "Transform" ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 652,
            "y" : 9
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      }, {
        "name" : "OnChange",
        "display" : {
          "position" : {
            "x" : 265,
            "y" : 176
          }
        },
        "config" : {
          "type" : ".OnChangeConfig",
          "outputMode" : "changed",
          "persistMode" : "memory",
          "keyExpression" : "stage.setBufferKey(null);",
          "inclusionList" : [ ],
          "metadataKey" : "bufferKey",
          "trackChanges" : [ ],
          "ignoreChanges" : [ ]
        },
        "outputs" : [ ]
      }, {
        "name" : "Transform_1",
        "display" : {
          "position" : {
            "x" : 314,
            "y" : 315
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "state.pipeline.set(\"avg\",0);\r\n\r\nstage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "CallableTrigger",
        "display" : {
          "position" : {
            "x" : -359,
            "y" : 2
          }
        },
        "config" : {
          "type" : ".TriggerCallable",
          "enabled" : true
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "eventTrigger",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 287,
            "y" : -3
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "EventTrigger",
        "display" : {
          "position" : {
            "x" : -426,
            "y" : 4
          }
        },
        "config" : {
          "type" : ".TriggerEvent",
          "enabled" : true,
          "reference" : "{{Connection.opc.MotorXXX_PLC}}"
        }
      }, {
        "name" : "FlowTrigger",
        "display" : {
          "position" : {
            "x" : -432,
            "y" : 159
          }
        },
        "config" : {
          "type" : ".TriggerFlow",
          "enabled" : false,
          "flowEvaluation" : {
            "type" : "Exception",
            "interval" : {
              "duration" : 1,
              "units" : "Seconds"
            },
            "mode" : "Always",
            "expression" : "{{Connection.opc.MotorXXX_PLC({\"motorNumber\":\"{{this.motorNumber}}\"})}}",
            "delay" : {
              "duration" : 0,
              "units" : "Seconds"
            }
          },
          "inReferences" : [ "{{Connection.opc.MotorXXX_PLC({\"motorNumber\":\"{{this.motorNumber}}\"})}}" ],
          "publishMode" : "All",
          "template" : {
            "type" : "Static",
            "params" : [ {
              "name" : "motorNumber",
              "pattern" : "001-5"
            } ]
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "eventopcbranch",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 139,
            "y" : 170
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "EventTrigger",
        "display" : {
          "position" : {
            "x" : -367,
            "y" : 16
          }
        },
        "config" : {
          "type" : ".TriggerEvent",
          "enabled" : true,
          "reference" : "{{Connection.opc.BUILD1}}"
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "motor001",
      "tags" : [ ],
      "inputStages" : [ "Model", "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 297,
            "y" : -25
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      }, {
        "name" : "Model",
        "display" : {
          "position" : {
            "x" : 310,
            "y" : 169
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "motorModel",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "standardatt1",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.motorId;"
            }
          }, {
            "name" : "stanadardatt2",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.amps;"
            }
          } ]
        },
        "outputs" : [ "WriteNew" ]
      }, {
        "name" : "WriteNew",
        "display" : {
          "position" : {
            "x" : 738,
            "y" : 165
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.mqtt}}",
          "qualifier" : {
            "topic" : "newTopic/Motor001Standardized",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : false,
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "EventTrigger",
        "display" : {
          "position" : {
            "x" : -457,
            "y" : 134
          }
        },
        "config" : {
          "type" : ".TriggerEvent",
          "enabled" : false,
          "reference" : "{{Connection.mqtt.Site1_Area1_Line1_assets_motors_Motor001}}"
        }
      }, {
        "name" : "FlowTrigger",
        "display" : {
          "position" : {
            "x" : -387,
            "y" : -149
          }
        },
        "config" : {
          "type" : ".TriggerFlow",
          "enabled" : false,
          "flowEvaluation" : {
            "type" : "Exception",
            "interval" : {
              "duration" : 1,
              "units" : "Seconds"
            },
            "mode" : "Always",
            "expression" : "{{Connection.mqtt.Site1_Area1_Line1_assets_motors_Motor001}}",
            "delay" : {
              "duration" : 0,
              "units" : "Seconds"
            }
          },
          "inReferences" : [ "{{Connection.mqtt.Site1_Area1_Line1_assets_motors_Motor001}}" ],
          "publishMode" : "All",
          "template" : {
            "type" : "Off"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "motor001_to_mqtt",
      "tags" : [ "starter_solution" ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "To_MQTT",
        "display" : {
          "position" : {
            "x" : 2490,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.mqtt}}",
          "qualifier" : {
            "topic" : "{{event.value.site}}/{{event.value.area}}/{{event.value.line}}/assets/motors/{{event.value.motorId}} ",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : false,
            "breakupArrays" : false,
            "filterList" : [ "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      }, {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "Motor1to4_PLC",
            "params" : { },
            "pick" : "",
            "connectionName" : "opc"
          }
        },
        "outputs" : [ "Return", "Breakup" ]
      }, {
        "name" : "Breakup",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "array"
        },
        "outputs" : [ "Filter" ]
      }, {
        "name" : "Filter",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "include",
          "filterList" : [ {
            "filterType" : "exactPathFilter",
            "filterText" : "ID"
          } ],
          "retainAsMetadata" : true,
          "metadataKey" : "motorFilter"
        },
        "outputs" : [ "Read_1", "MergeRead" ]
      }, {
        "name" : "Read_1",
        "display" : {
          "position" : {
            "x" : 1590,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "get_motorXXX_service_info",
            "params" : {
              "motorid" : "{{event.value.ID}}"
            },
            "pick" : "",
            "connectionName" : "sql"
          }
        },
        "outputs" : [ "Model" ]
      }, {
        "name" : "Model",
        "display" : {
          "position" : {
            "x" : 2040,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "motors",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "motorId",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value[0].machineid;"
            }
          }, {
            "name" : "site",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return System.Variables.Site;"
            }
          }, {
            "name" : "area",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return System.Variables.Area;"
            }
          }, {
            "name" : "line",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return System.Variables.Line;"
            }
          }, {
            "name" : "amps",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorFilter.Amps;"
            }
          }, {
            "name" : "speed",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorFilter.Speed;"
            }
          }, {
            "name" : "vibration",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorFilter.Vibration;"
            }
          }, {
            "name" : "error",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorFilter.Error;"
            }
          }, {
            "name" : "lastServiceDate",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value[0].lastservicedate;"
            }
          }, {
            "name" : "lastServiceNotes",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value[0].Notes;"
            }
          } ]
        },
        "outputs" : [ "To_MQTT" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 2407,
            "y" : -398
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "MergeRead",
        "display" : {
          "position" : {
            "x" : 1598,
            "y" : 220
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "child",
            "key" : "Source1",
            "reference" : "{{Connection.sql.get_motorXXX_service_info({\"motorid\":\"{{event.value.ID}}\"})}}"
          } ],
          "inputValueLocation" : "exclude",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "Transform" ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 2068,
            "y" : 199
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "FlowTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".TriggerFlow",
          "enabled" : false,
          "flowEvaluation" : {
            "type" : "Polled",
            "interval" : {
              "duration" : 1,
              "units" : "Seconds"
            },
            "mode" : "Always",
            "expression" : "",
            "delay" : {
              "duration" : 0,
              "units" : "Seconds"
            }
          },
          "inReferences" : [ "{{Instance.motor001}}" ],
          "publishMode" : "All",
          "template" : {
            "type" : "Off"
          }
        }
      }, {
        "name" : "PolledTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : true,
          "interval" : {
            "duration" : 1,
            "units" : "Seconds"
          }
        }
      }, {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -460,
            "y" : -235
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "EmptyParameters"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "motor001_to_mqtt_bak",
      "tags" : [ "starter_solution" ],
      "inputStages" : [ "MergeRead" ],
      "stages" : [ {
        "name" : "To_MQTT",
        "display" : {
          "position" : {
            "x" : 3045,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.mqtt}}",
          "qualifier" : {
            "topic" : "{{event.value.site}}/{{event.value.area}}/{{event.value.line}}/assets/motors/{{event.value.motorId}} ",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : false,
            "breakupArrays" : false,
            "filterList" : [ "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      }, {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 345,
            "y" : 202
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "Motor001_PLC_param",
            "params" : {
              "number" : "{{event.value}}"
            },
            "pick" : "",
            "connectionName" : "opc"
          }
        },
        "outputs" : [ "Read_1" ]
      }, {
        "name" : "Read_1",
        "display" : {
          "position" : {
            "x" : 795,
            "y" : 202
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Instance",
            "name" : "motor001",
            "params" : { },
            "pick" : ""
          }
        },
        "outputs" : [ ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 202
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "let assetRange = [\"001\",\"002\",\"003\"]\r\nstage.setValue(assetRange);"
        },
        "outputs" : [ "Breakup" ]
      }, {
        "name" : "Breakup",
        "display" : {
          "position" : {
            "x" : -105,
            "y" : 202
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "array"
        },
        "outputs" : [ "Read" ]
      }, {
        "name" : "Read_2",
        "display" : {
          "position" : {
            "x" : 2145,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "get_motor001_service_info_copy",
            "params" : {
              "motorId" : "{{event.value.ID}}"
            },
            "pick" : "",
            "connectionName" : "sql"
          }
        },
        "outputs" : [ "Model" ]
      }, {
        "name" : "MergeRead",
        "display" : {
          "position" : {
            "x" : 345,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "child",
            "key" : "Source1",
            "reference" : "{{Connection.opc.Motor1to4_PLC}}"
          } ],
          "inputValueLocation" : "exclude",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "Breakup_2" ]
      }, {
        "name" : "Breakup_1",
        "display" : {
          "position" : {
            "x" : 1245,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "array"
        },
        "outputs" : [ "Filter" ]
      }, {
        "name" : "Breakup_2",
        "display" : {
          "position" : {
            "x" : 795,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "object"
        },
        "outputs" : [ "Breakup_1" ]
      }, {
        "name" : "Model",
        "display" : {
          "position" : {
            "x" : 2595,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "motors",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "motorId",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value[0].machineid;"
            }
          }, {
            "name" : "site",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return System.Variables.Site;"
            }
          }, {
            "name" : "area",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return System.Variables.Area;"
            }
          }, {
            "name" : "line",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return System.Variables.Line;"
            }
          }, {
            "name" : "amps",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorXxxFilter1.Amps;"
            }
          }, {
            "name" : "speed",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorXxxFilter1.Speed;"
            }
          }, {
            "name" : "vibration",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorXxxFilter1.Vibration;"
            }
          }, {
            "name" : "error",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorXxxFilter1.Error;"
            }
          }, {
            "name" : "lastServiceDate",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value[0].lastservicedate;"
            }
          }, {
            "name" : "lastServiceNotes",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value[0].Notes;"
            }
          } ]
        },
        "outputs" : [ "To_MQTT" ]
      }, {
        "name" : "Filter",
        "display" : {
          "position" : {
            "x" : 1695,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "include",
          "filterList" : [ {
            "filterType" : "exactPathFilter",
            "filterText" : "ID"
          } ],
          "retainAsMetadata" : true,
          "metadataKey" : "motorXxxFilter1"
        },
        "outputs" : [ "Read_2" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "FlowTrigger",
        "display" : {
          "position" : {
            "x" : -550,
            "y" : -255
          }
        },
        "config" : {
          "type" : ".TriggerFlow",
          "enabled" : false,
          "flowEvaluation" : {
            "type" : "Polled",
            "interval" : {
              "duration" : 1,
              "units" : "Seconds"
            },
            "mode" : "Always",
            "expression" : "",
            "delay" : {
              "duration" : 0,
              "units" : "Seconds"
            }
          },
          "inReferences" : [ "{{Instance.motor001}}" ],
          "publishMode" : "All",
          "template" : {
            "type" : "Off"
          }
        }
      }, {
        "name" : "PolledTrigger",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : false,
          "interval" : {
            "duration" : 1,
            "units" : "Seconds"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "motor001_to_mqtt_observable",
      "tags" : [ "starter_solution" ],
      "inputStages" : [ "MergeRead" ],
      "stages" : [ {
        "name" : "To_MQTT",
        "display" : {
          "position" : {
            "x" : 3495,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.mqtt}}",
          "qualifier" : {
            "topic" : "new/{{event.value.site}}/{{event.value.area}}/{{event.value.line}}/assets/motors/{{event.value.motorId}} ",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : false,
            "breakupArrays" : false,
            "filterList" : [ "_name", "_model" ]
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      }, {
        "name" : "Read_2",
        "display" : {
          "position" : {
            "x" : 2595,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "get_motor001_service_info_copy",
            "params" : {
              "motorId" : "{{event.value.ID}}"
            },
            "pick" : "",
            "connectionName" : "sql"
          }
        },
        "outputs" : [ "Model" ]
      }, {
        "name" : "MergeRead",
        "display" : {
          "position" : {
            "x" : 345,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "child",
            "key" : "Source1",
            "reference" : "{{Connection.opc.Motor1to4_PLC}}"
          } ],
          "inputValueLocation" : "exclude",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "Breakup_2" ]
      }, {
        "name" : "Breakup_1",
        "display" : {
          "position" : {
            "x" : 1245,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "array"
        },
        "outputs" : [ "Filter" ]
      }, {
        "name" : "Breakup_2",
        "display" : {
          "position" : {
            "x" : 795,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "object"
        },
        "outputs" : [ "Breakup_1" ]
      }, {
        "name" : "Model",
        "display" : {
          "position" : {
            "x" : 3045,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "motors",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "motorId",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value[0].machineid;"
            }
          }, {
            "name" : "site",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return System.Variables.Site;"
            }
          }, {
            "name" : "area",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return System.Variables.Area;"
            }
          }, {
            "name" : "line",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return System.Variables.Line;"
            }
          }, {
            "name" : "amps",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorXxxFilter1.Amps;"
            }
          }, {
            "name" : "speed",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorXxxFilter1.Speed;"
            }
          }, {
            "name" : "vibration",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorXxxFilter1.Vibration;"
            }
          }, {
            "name" : "error",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.metadata.motorXxxFilter1.Error;"
            }
          }, {
            "name" : "lastServiceDate",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value[0].lastservicedate;"
            }
          }, {
            "name" : "lastServiceNotes",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value[0].Notes;"
            }
          } ]
        },
        "outputs" : [ "To_MQTT" ]
      }, {
        "name" : "Filter",
        "display" : {
          "position" : {
            "x" : 1695,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "include",
          "filterList" : [ {
            "filterType" : "exactPathFilter",
            "filterText" : "ID"
          } ],
          "retainAsMetadata" : true,
          "metadataKey" : "motorXxxFilter1"
        },
        "outputs" : [ "Switch" ]
      }, {
        "name" : "Switch",
        "display" : {
          "position" : {
            "x" : 2145,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.value.ID!==\"MOTOR005\")",
            "outputs" : [ "Read_2" ],
            "description" : "Value Is True"
          }, {
            "expression" : "return true",
            "outputs" : [ "Transform" ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 2577,
            "y" : 193
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      }, {
        "name" : "WriteNew",
        "display" : {
          "position" : {
            "x" : 3519,
            "y" : 120
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.sf}}",
          "qualifier" : {
            "table" : "newtable",
            "writeType" : "insert",
            "whereColumn" : "",
            "logAsJSON" : false,
            "createOption" : "off",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      }, {
        "name" : "sql",
        "display" : {
          "position" : {
            "x" : 3534,
            "y" : -185
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.sql}}",
          "qualifier" : {
            "table" : "nwetable",
            "writeType" : "insert",
            "whereColumn" : "",
            "logAsJSON" : false,
            "createOption" : "off",
            "tableCacheInterval" : {
              "duration" : 1,
              "units" : "Hours"
            },
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "PolledTrigger",
        "display" : {
          "position" : {
            "x" : -555,
            "y" : 18
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : true,
          "interval" : {
            "duration" : 1,
            "units" : "Seconds"
          }
        }
      }, {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -519,
            "y" : -182
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : false,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "att1",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Any"
              }, {
                "attributeType" : "Internal",
                "name" : "att2",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Any"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "namedCaptureGroup",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 173,
            "y" : -11
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const dateStr = '2025-06-05';\r\nconst regex = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\r\nconst result = regex.exec(dateStr);\r\n\r\n\r\nif (result && result.groups) {\r\n  console.log(result.groups.year);  // \"2025\"\r\n  console.log(result.groups.month); // \"06\"\r\n  console.log(result.groups.day);   // \"05\"\r\n}\r\n\r\nstage.setValue(result);\r\nstage.setValue(result.groups);"
        },
        "outputs" : [ "Model" ]
      }, {
        "name" : "Model",
        "display" : {
          "position" : {
            "x" : 638,
            "y" : -16
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "test",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "att1",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.year;"
            }
          }, {
            "name" : "att2",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.month;"
            }
          }, {
            "name" : "att3",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value.day;"
            }
          } ]
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "opc2wo",
      "tags" : [ ],
      "inputStages" : [ "MergeRead", "Filter" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 346,
            "y" : -24
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "Packaging_InjectionMolding1_ProductID",
            "params" : { },
            "pick" : "",
            "connectionName" : "opc"
          }
        },
        "outputs" : [ "Read_1" ]
      }, {
        "name" : "Read_1",
        "display" : {
          "position" : {
            "x" : 748,
            "y" : -37
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "mesWO_param",
            "params" : {
              "productid" : ""
            },
            "pick" : "",
            "connectionName" : "sql_mes"
          }
        },
        "outputs" : [ ]
      }, {
        "name" : "MergeRead",
        "display" : {
          "position" : {
            "x" : 226,
            "y" : 136
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "child",
            "key" : "Source1",
            "reference" : "{{Connection.opc.Packaging_InjectionMolding1_ProductID}}"
          } ],
          "inputValueLocation" : "inline",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "Transform" ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 669,
            "y" : 159
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      }, {
        "name" : "Filter",
        "display" : {
          "position" : {
            "x" : 36,
            "y" : -156
          }
        },
        "config" : {
          "type" : ".AttributeFilterConfig",
          "filterOption" : "include",
          "filterList" : [ {
            "filterType" : "exactPathFilter",
            "filterText" : "sample"
          } ],
          "retainAsMetadata" : true,
          "metadataKey" : "filtered"
        },
        "outputs" : [ "Read" ]
      } ],
      "trackActivity" : false,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "pi2csv",
      "tags" : [ ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 263,
            "y" : -3
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "test",
            "params" : { },
            "pick" : "",
            "connectionName" : "piremote"
          }
        },
        "outputs" : [ "WriteNew" ]
      }, {
        "name" : "WriteNew",
        "display" : {
          "position" : {
            "x" : 696,
            "y" : -8
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.csv}}",
          "qualifier" : {
            "fileName" : "test.csv",
            "delimiter" : "",
            "create" : true,
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "sleep",
      "tags" : [ ],
      "inputStages" : [ "Sleep1Second" ],
      "stages" : [ {
        "name" : "Sleep1Second",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n const start = Date.now();\r\n while (Date.now() - start < ms) {\r\n   // Busy wait\r\n }\r\n}\r\n\r\n//const sleepValue = (event.metadata.breakupIndex + 1)*1000;\r\n//sleep(sleepValue) \r\nsleep(1000);\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "AddTimestamp" ]
      }, {
        "name" : "AddTimestamp",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "addTimestamp",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "value",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value;"
            }
          }, {
            "name" : "timestamp",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return Date.now();"
            }
          } ]
        },
        "outputs" : [ "WriteNew" ]
      }, {
        "name" : "WriteNew",
        "display" : {
          "position" : {
            "x" : 1122,
            "y" : 17
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.mqtt}}",
          "qualifier" : {
            "topic" : "sleepWrite/{{event.value.value}}",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : false,
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "CallableTrigger",
        "display" : {
          "position" : {
            "x" : -404,
            "y" : 9
          }
        },
        "config" : {
          "type" : ".TriggerCallable",
          "enabled" : true
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "sleepStagger",
      "tags" : [ ],
      "inputStages" : [ "SampleArray" ],
      "stages" : [ {
        "name" : "SampleArray",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "event.value = [1,2,3]\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "Breakup" ]
      }, {
        "name" : "Breakup",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".BreakupConfig",
          "breakupType" : "array"
        },
        "outputs" : [ "Write" ]
      }, {
        "name" : "Subpipeline",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".SubPipelineConfig",
          "failureOutputs" : [ ],
          "reference" : "{{Pipeline.sleeper}}"
        },
        "outputs" : [ "WriteNew" ]
      }, {
        "name" : "WriteNew",
        "display" : {
          "position" : {
            "x" : 1607,
            "y" : 27
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.mqtt}}",
          "qualifier" : {
            "topic" : "sleep/{{event.value.value}}",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : false,
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 1178,
            "y" : 149
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n  const start = Date.now();\r\n  while (Date.now() - start < ms) {\r\n    // Busy wait\r\n  }\r\n}\r\nsleep(1000);\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "WriteNew" ]
      }, {
        "name" : "Write",
        "display" : {
          "position" : {
            "x" : 1052,
            "y" : 303
          }
        },
        "config" : {
          "type" : ".WriteConfig",
          "failureOutputs" : [ ],
          "references" : [ "{{Pipeline.sleep}}" ],
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "sleeper",
      "tags" : [ ],
      "inputStages" : [ "Sleep1Second" ],
      "stages" : [ {
        "name" : "Sleep1Second",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "function sleep(ms) {\r\n const start = Date.now();\r\n while (Date.now() - start < ms) {\r\n   // Busy wait\r\n }\r\n}\r\n\r\n//const sleepValue = (event.metadata.breakupIndex + 1)*1000;\r\n//sleep(sleepValue) \r\nsleep(1000);\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "AddTimestamp" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "AddTimestamp",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "addTimestamp",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "value",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return event.value;"
            }
          }, {
            "name" : "timestamp",
            "expression" : {
              "type" : "JavaScript",
              "expression" : "return Date.now();"
            }
          } ]
        },
        "outputs" : [ "Return" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "CallableTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerCallable",
          "enabled" : true
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "smartquery",
      "description" : "testDesc",
      "tags" : [ "aiAgent" ],
      "inputStages" : [ "Transform_1" ],
      "stages" : [ {
        "name" : "SmartQuery",
        "display" : {
          "position" : {
            "x" : 1170,
            "y" : -150
          }
        },
        "config" : {
          "type" : ".SmartQueryConfig",
          "query" : {
            "from" : [ "{{event.value.test}}.**" ],
            "where" : "",
            "select" : {
              "what" : [ "value", "path" ],
              "as" : "Hierarchy",
              "delim" : "/"
            }
          },
          "breakup" : true
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "WriteNew",
        "display" : {
          "position" : {
            "x" : 1599,
            "y" : 119
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.mqtt}}",
          "qualifier" : {
            "topic" : "{{event.value._path}}",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : false,
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 1943,
            "y" : -86
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      }, {
        "name" : "Switch",
        "display" : {
          "position" : {
            "x" : 205,
            "y" : 34
          }
        },
        "config" : {
          "type" : ".SwitchConfig",
          "switchCases" : [ {
            "expression" : "return Boolean(event.value.test)",
            "outputs" : [ "SmartQuery" ],
            "description" : "Value Is True"
          }, {
            "expression" : "return true",
            "outputs" : [ "Transform" ],
            "description" : "Default"
          } ],
          "evaluationType" : "onFirst"
        },
        "outputs" : [ ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 682,
            "y" : 189
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "event.value.test = \"Site01\";\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "SmartQuery" ]
      }, {
        "name" : "Transform_1",
        "display" : {
          "position" : {
            "x" : 896,
            "y" : -282
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "const pl = [{a:1},{a:2}]\r\nstage.setValue(\"{\"+JSON.stringify(pl));"
        },
        "outputs" : [ "Return" ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "PolledTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : false,
          "interval" : {
            "duration" : 2,
            "units" : "Seconds"
          }
        }
      }, {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "test",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Any"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "smartquery2",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 189,
            "y" : -5
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event);"
        },
        "outputs" : [ "SmartQuery" ]
      }, {
        "name" : "SmartQuery",
        "display" : {
          "position" : {
            "x" : 633,
            "y" : -10
          }
        },
        "config" : {
          "type" : ".SmartQueryConfig",
          "query" : {
            "from" : [ "Site01.{{event.value.value.Area}}.**" ],
            "where" : "",
            "select" : {
              "what" : [ "value", "path" ],
              "as" : "List",
              "delim" : "."
            }
          },
          "breakup" : false
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -453,
            "y" : -9
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "param1",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "defaultValue" : "defaultValue",
                "internalType" : "Any"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "statistics",
      "tags" : [ ],
      "inputStages" : [ "Read" ],
      "stages" : [ {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 277,
            "y" : 10
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "System",
            "name" : "Pipelines",
            "params" : { },
            "pick" : "",
            "source" : ""
          }
        },
        "outputs" : [ "WriteNew" ]
      }, {
        "name" : "WriteNew",
        "display" : {
          "position" : {
            "x" : 724,
            "y" : 16
          }
        },
        "config" : {
          "type" : ".DynamicWriteConfig",
          "failureOutputs" : [ ],
          "connectionReference" : "{{Connection.mqtt}}",
          "qualifier" : {
            "topic" : "stats",
            "qos" : 0,
            "namedRoot" : false,
            "retained" : false,
            "breakupArrays" : false
          },
          "qualifierExpression" : "",
          "writeReturn" : "ignore"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : false,
      "triggers" : [ {
        "name" : "PolledTrigger",
        "display" : {
          "position" : {
            "x" : -443,
            "y" : 10
          }
        },
        "config" : {
          "type" : ".TriggerPolled",
          "enabled" : true,
          "interval" : {
            "duration" : 1,
            "units" : "Seconds"
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "testArray",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 245,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "event.value = [{\"test\":\"123\"}]\r\nevent.value = JSON.stringify(event.value);\r\nevent.value = \"\\\\[\\\\{\\\"test\\\"\\:\\\"123\\\"\\\\}\\\\]\"\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "Read" ]
      }, {
        "name" : "Read",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReadConfig",
          "failureOutputs" : [ ],
          "reference" : {
            "type" : "Input",
            "name" : "testArray",
            "params" : {
              "p" : "{{event.value}}"
            },
            "pick" : "",
            "connectionName" : "webh"
          }
        },
        "outputs" : [ "Transform_1" ]
      }, {
        "name" : "Transform_1",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "testCondition",
      "tags" : [ ],
      "inputStages" : [ ],
      "stages" : [ ],
      "trackActivity" : false,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "testModelValidation",
      "tags" : [ ],
      "inputStages" : [ "Model" ],
      "stages" : [ {
        "name" : "ModelValidation",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelValidationConfig",
          "failureOutputs" : [ "Transform" ],
          "models" : [ "OpenAiPrompt" ],
          "additionalProperties" : "fail"
        },
        "outputs" : [ "Transform_1" ]
      }, {
        "name" : "Transform_1",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : -67
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      }, {
        "name" : "Model",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ModelConfig",
          "model" : "OpenAiPrompt",
          "objectName" : "",
          "initExpression" : "",
          "attributes" : [ {
            "name" : "prompt",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          }, {
            "name" : "instruction",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          }, {
            "name" : "model",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          }, {
            "name" : "reset",
            "expression" : {
              "type" : "JavaScript",
              "expression" : ""
            }
          } ]
        },
        "outputs" : [ "MergeRead" ]
      }, {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 1140,
            "y" : 67
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ ]
      }, {
        "name" : "MergeRead",
        "display" : {
          "position" : {
            "x" : 511,
            "y" : 175
          }
        },
        "config" : {
          "type" : ".ReadSourcesConfig",
          "failureOutputs" : [ ],
          "keyReferences" : [ {
            "location" : "inline",
            "key" : "Source1",
            "reference" : "{{System.Internal}}"
          } ],
          "inputValueLocation" : "inline",
          "inputValueKey" : "eventIn"
        },
        "outputs" : [ "ModelValidation" ]
      } ],
      "trackActivity" : false,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "testarguments",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 240,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "stage.setValue(event.value);"
        },
        "outputs" : [ "Return" ]
      }, {
        "name" : "Return",
        "display" : {
          "position" : {
            "x" : 690,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".ReturnConfig"
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ {
        "name" : "ApiTrigger",
        "display" : {
          "position" : {
            "x" : -450,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".TriggerApi",
          "enabled" : true,
          "parameters" : {
            "type" : "inline",
            "model" : {
              "name" : "params",
              "tags" : [ ],
              "attributes" : [ {
                "attributeType" : "Internal",
                "name" : "arg1",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "internalType" : "Any"
              }, {
                "attributeType" : "Internal",
                "name" : "arg2",
                "nullable" : false,
                "required" : false,
                "array" : false,
                "defaultValue" : "default",
                "internalType" : "Any"
              } ]
            }
          }
        }
      } ],
      "errorHandler" : {
        "type" : "default"
      }
    }, {
      "name" : "transformation",
      "tags" : [ ],
      "inputStages" : [ "Transform" ],
      "stages" : [ {
        "name" : "Transform",
        "display" : {
          "position" : {
            "x" : 166,
            "y" : 10
          }
        },
        "config" : {
          "type" : ".TransformConfig",
          "transformExpression" : "event.value = {\r\n            \"02G-0013A VAC TWR ACCUM SOUR WATER\": {\r\n                  \"Motor\": {\r\n                        \"Shaft\": {\r\n                              \"MOTOR IB\": {\r\n                                    \"MIB X\": {\r\n                                          \"Accl Wf (5000 Hz)\": {\r\n                                                \"Data\": [\r\n                                                      0,\r\n                                                      0,\r\n                                                      0,\r\n                                                      0\r\n                                                ],\r\n                                                \"NumberofSamples\": 0,\r\n                                                \"SamplingPeriod\": 0\r\n                                          },\r\n                                          \"Vel Spec (1000Hz / 1600 lines)\": {\r\n                                                \"Data\": [\r\n                                                      0,\r\n                                                      0,\r\n                                                      0,\r\n                                                      0\r\n                                                ],\r\n                                                \"NumberofSamples\": 0,\r\n                                                \"SamplingPeriod\": 0\r\n                                          }\r\n                                    }\r\n                              }\r\n                        }\r\n                  },\r\n                  \"Pump\": {\r\n                        \"Shaft\": {\r\n                              \"Pump IB\": {\r\n                                    \"MIB X\": {\r\n                                          \"Accl Wf (5000 Hz)\": {\r\n                                                \"Data\": [\r\n                                                      0,\r\n                                                      0,\r\n                                                      0,\r\n                                                      0\r\n                                                ],\r\n                                                \"NumberofSamples\": 0,\r\n                                                \"SamplingPeriod\": 0\r\n                                          },\r\n                                          \"Vel Spec (1000Hz / 1600 lines)\": {\r\n                                                \"Data\": [\r\n                                                      0,\r\n                                                      0,\r\n                                                      0,\r\n                                                      0\r\n                                                ],\r\n                                                \"NumberofSamples\": 0,\r\n                                                \"SamplingPeriod\": 0\r\n                                          }\r\n                                    }\r\n                              }\r\n                        }\r\n                  }\r\n            }\r\n}\r\nstage.setValue(event.value);"
        },
        "outputs" : [ "Flatten" ]
      }, {
        "name" : "Flatten",
        "display" : {
          "position" : {
            "x" : 580,
            "y" : 0
          }
        },
        "config" : {
          "type" : ".FlattenConfig",
          "delimiter" : "."
        },
        "outputs" : [ ]
      } ],
      "trackActivity" : true,
      "triggers" : [ ],
      "errorHandler" : {
        "type" : "default"
      }
    } ],
    "tags" : [ {
      "name" : "OpenAiChatHistoryV1"
    }, {
      "name" : "PAS_X_MSI"
    }, {
      "name" : "PipelineMechanics"
    }, {
      "name" : "PipelineStageCommaParam",
      "description" : "This project shows how to stage data into SQLite for dynamically referencing into an Input, instead of parameterizing the values directly into the Read Stage from a Pipeline. This is to workaround the parameterizing engine that has a limitation that prevents in passing strings with commas, since there is a hard delimiter on commas. Version 4.2 resolves this limitation, so this staging method will not be necessary moving forward."
    }, {
      "name" : "WriteToCrate"
    }, {
      "name" : "aiAgent"
    }, {
      "name" : "starter_solution"
    } ],
    "functions" : [ ],
    "namespace" : [ {
      "id" : "b38ac8c1-2a5d-44d9-9e04-ea0a6b0d224a",
      "name" : "Site01"
    }, {
      "id" : "ceab426c-e05d-4e47-9127-5b4042c2d1e6",
      "name" : "Area01",
      "parentNamespaceId" : "b38ac8c1-2a5d-44d9-9e04-ea0a6b0d224a"
    }, {
      "id" : "e41f3ed8-b771-4f71-a3cf-687f827f25eb",
      "name" : "Line01",
      "parentNamespaceId" : "ceab426c-e05d-4e47-9127-5b4042c2d1e6"
    }, {
      "id" : "8b621ef5-df9e-406f-847b-a2d0e95a2c2e",
      "name" : "Injection1",
      "parentNamespaceId" : "e41f3ed8-b771-4f71-a3cf-687f827f25eb",
      "reference" : {
        "type" : "Instance",
        "name" : "Injection1"
      }
    }, {
      "id" : "5c02e432-a7de-4d7d-b5d7-2c2d0d9ec215",
      "name" : "pipeline",
      "parentNamespaceId" : "e41f3ed8-b771-4f71-a3cf-687f827f25eb",
      "reference" : {
        "type" : "Pipeline",
        "name" : "NamespaceNodeReadsToUNS"
      }
    }, {
      "id" : "78d1c3cb-42b3-49e7-be19-b241ca83c4b2",
      "name" : "newsection",
      "parentNamespaceId" : "e41f3ed8-b771-4f71-a3cf-687f827f25eb",
      "reference" : {
        "type" : "Instance",
        "name" : "motor001"
      }
    }, {
      "id" : "27f01a79-c1b0-4453-a1d7-635e760240d6",
      "name" : "Site02"
    }, {
      "id" : "dd057eb8-c145-416b-af37-ec0d18ca0cea",
      "name" : "Area01",
      "parentNamespaceId" : "27f01a79-c1b0-4453-a1d7-635e760240d6"
    }, {
      "id" : "4a02da41-395e-462e-acb0-ce1bfc947d76",
      "name" : "Motor001",
      "parentNamespaceId" : "dd057eb8-c145-416b-af37-ec0d18ca0cea",
      "reference" : {
        "type" : "Instance",
        "name" : "motor001"
      }
    }, {
      "id" : "2473c686-05da-41d5-b72c-a55d17902775",
      "name" : "Line01",
      "parentNamespaceId" : "dd057eb8-c145-416b-af37-ec0d18ca0cea"
    }, {
      "id" : "513bfdce-21bc-4e39-8067-808f4f38da8c",
      "name" : "condition",
      "reference" : {
        "type" : "Pipeline",
        "name" : "conditionread"
      }
    } ]
  },
  "network" : {
    "version" : 0,
    "groups" : [ {
      "name" : "demo",
      "token" : "UjcPcphTOzSVX1js9J4ct79qzcysxjZJ"
    } ],
    "hubs" : [ {
      "name" : "EdgeNode1",
      "description" : "",
      "clientId" : "774ecf42-ca8d-47ae-93ca-e82409c21db9",
      "networkGroup" : "demo"
    }, {
      "name" : "EdgeNode2",
      "description" : "",
      "clientId" : "a3c64049-0e86-4916-bb1e-8052bb7a4eef",
      "networkGroup" : "demo"
    }, {
      "name" : "EdgeNode3",
      "description" : "",
      "clientId" : "4328748d-4c5a-4b89-be41-ef00441d792f",
      "networkGroup" : "demo"
    }, {
      "name" : "EdgeNode4",
      "description" : "",
      "clientId" : "69a4ac7e-9ace-45da-b73c-b6019b7bef4f",
      "networkGroup" : "demo"
    } ]
  },
  "accessControl" : {
    "apiKeys" : [ {
      "friendlyName" : "new",
      "expiration" : 1780185599000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "mcpUser",
      "hash" : "l9nKMMNSZDTpr7VsZfaeNnaZdjmaZNmVXHjDlCvfDvc="
    }, {
      "friendlyName" : "new2",
      "expiration" : 1780185599000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "mcpUser",
      "hash" : "RFDaitOMFkjhOpSIeP+I0moE7of1+NDQgd95CFfqN1U="
    }, {
      "friendlyName" : "testdemo",
      "expiration" : 1780531199000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "restUser",
      "hash" : "jmomYI1iTP40cSv8nSoxp945XDFw6tZRYnXLqumDWAk="
    }, {
      "friendlyName" : "newkey2",
      "expiration" : 1780531199000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "mcpUser",
      "hash" : "xUmGbTEbd/O1mNqi9AVbpY9CSGraRFdhHBTN3mSiqKw="
    }, {
      "friendlyName" : "test66",
      "expiration" : 1780790399000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "restUser",
      "hash" : "bGZpQLtrRdWLFLEEwPx591sh+7ErZ1JpHRvtyGjrE/Q="
    }, {
      "friendlyName" : "new123",
      "expiration" : 1780790399000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "restUser",
      "hash" : "7FQxWpHyX48ba3OIPeo/auCNjWKppST7ZuamidxSaOg="
    }, {
      "friendlyName" : "qwe",
      "expiration" : 1780963199000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "restUser",
      "hash" : "8D2Fd9hECuE1YsI4cR82eN5fBzyEeDOc8or9/j8rR84="
    }, {
      "friendlyName" : "asd",
      "expiration" : 1781135999000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "restUser",
      "hash" : "QaejnJKd+xwpsWgTK6sRC1LzIbp5IFrWH7lUyFfDtpA="
    }, {
      "friendlyName" : "zxc",
      "expiration" : 1781135999000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "restUser",
      "hash" : "mjpkaE9VW1oMYqn3735TaiRUy5gI8C8LTQNM10qpVME="
    }, {
      "friendlyName" : "qwe",
      "expiration" : 1781222399000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "mcpUser",
      "hash" : "zkF6b5jf5QLYVq3dYxzv5aMPG9N7a7TXNg9qEiJ/vDo="
    }, {
      "friendlyName" : "wer",
      "expiration" : 1781395199000,
      "version" : 1,
      "algorithm" : "SHA-256",
      "user" : "restUser",
      "hash" : "ARIqxjCQs+HvXV+woMWbFGa3C+j17yFmONOjBUtdnYU="
    } ],
    "version" : 0,
    "roles" : [ {
      "name" : "admin",
      "policyVersion" : 1,
      "claims" : [ {
        "resources" : [ "*" ],
        "actions" : [ "*" ]
      } ]
    }, {
      "name" : "default",
      "policyVersion" : 1,
      "claims" : [ {
        "resources" : [ "*" ],
        "actions" : [ "read" ]
      }, {
        "resources" : [ "connection", "instance", "pipeline" ],
        "actions" : [ "*" ]
      } ]
    } ],
    "users" : [ {
      "name" : "administrator",
      "credentials" : {
        "salt" : "vOFWnojzO7a6eRJRFvqW6w==",
        "hashedPassword" : "/OI7nRMieNkIUyT8PfwLl0Cghdp9lak5/wjLOf4bQCG9g2coIPkneLSo6zsi8cyjXygwtS3I5BZvIGEGji3VTg=="
      },
      "policyVersion" : 1,
      "roles" : [ "admin" ],
      "claims" : [ ]
    }, {
      "name" : "mcpUser",
      "credentials" : {
        "salt" : "Nb6ZUJktAdFLKt4LatDyfA==",
        "hashedPassword" : "1KlcS9nLM9oMdNObfK9VvOs/TSAQG7PDWBiD0ztFch7DIalQtbqcLBxVXcyYnKJvuEl9SNJQHhFcNHLbeMUceg=="
      },
      "policyVersion" : 1,
      "roles" : [ "admin" ],
      "claims" : [ ]
    }, {
      "name" : "restUser",
      "credentials" : {
        "salt" : "AQQvVLd4pMiwdgoT1dlFwA==",
        "hashedPassword" : "+kcsUsgt75tyn4aZRJYwNDvR1a1GxRPTKcwL8AyAGB527lN1XX+6Yam/1Z+KtfwNKHOl71JvJchb00GpNosxKw=="
      },
      "policyVersion" : 1,
      "roles" : [ "admin" ],
      "claims" : [ ]
    } ]
  },
  "system" : {
    "version" : 0,
    "variables" : [ {
      "name" : "Enterprise",
      "value" : "Enterprise1"
    }, {
      "name" : "Site",
      "value" : "Site1"
    }, {
      "name" : "Area",
      "value" : "Area1"
    }, {
      "name" : "Line",
      "value" : "Line1"
    } ],
    "secrets" : [ ],
    "certificates" : [ {
      "alias" : "app-certificate-private-key",
      "chain" : "MIIESzCCAzOgAwIBAgIIZPk8E50XM80wDQYJKoZIhvcNAQELBQAwUTEwMC4GA1UEAwwnSGlnaEJ5dGUvSW50ZWxsaWdlbmNlSHViQFRISVJBTy1KTVNHUlYzMRAwDgYDVQQKDAdVbmtub3duMQswCQYDVQQGEwJVUzAeFw0yNTA1MjgwNjA5MTBaFw0zMDA1MjcwNjA5MTBaMFExMDAuBgNVBAMMJ0hpZ2hCeXRlL0ludGVsbGlnZW5jZUh1YkBUSElSQU8tSk1TR1JWMzEQMA4GA1UECgwHVW5rbm93bjELMAkGA1UEBhMCVVMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCoV/gtKS3e1WikrklOwUIlkR+zVBfRw4an8j+/MtgPNMVrcYR+TaGoqB2l5G7PXS0AGPJknBjcKDnS5NyULA8Fdtus+VjDxtRSb/n82nRiewMYpOBbSFNotAMmFQAeC0LP0ezNoTyEwe4H6XpdWgaoUWXrt7bObrOVKFM+VW5kA/0Rm8imTQmq3Opl+0KoQldJe4lwmLEpLXGGSrQCzBS0fH4qPLpFDqaK/pTfWpBIRJdhnFMvxcddStCXYD02zs+/MzPv1sD9gG55duhfWSnVFhXbNbNN0UUwOSkFoaeCH2w1fGqoJGEB7WDPUyOE9OKyyCMaDqNX8zl2gXathwE7AgMBAAGjggElMIIBITBGBgNVHREEPzA9hit1cm46VEhJUkFPLUpNU0dSVjM6SGlnaEJ5dGU6SW50ZWxsaWdlbmNlSHVigg5USElSQU8tSk1TR1JWMzALBgNVHQ8EBAMCAvQwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAkGA1UdEwQCMAAwHQYDVR0OBBYEFBunxuS8ztjb2tQ6CQBva5Yp6iIDMIGABgNVHSMEeTB3gBQbp8bkvM7Y29rUOgkAb2uWKeoiA6FVpFMwUTEwMC4GA1UEAwwnSGlnaEJ5dGUvSW50ZWxsaWdlbmNlSHViQFRISVJBTy1KTVNHUlYzMRAwDgYDVQQKDAdVbmtub3duMQswCQYDVQQGEwJVU4IIZPk8E50XM80wDQYJKoZIhvcNAQELBQADggEBAHGuUUhHjmwAdcSB3SBIHrs9p9kA9ql1EbNMD2nv0day7ua0cZz/fGnjeIJh7JnHMCMnDH+uMnSwP138BhrfSbBt98hwfcXnBGvZF+t4r4EPI/H8YaHJ0bCBuT8GHqcVzyAffNA9s6SqJKlJQgCZAX3DLD5CYmZIwSlayfAmCBI8HMjZ67YAE734zf9oZ0kmTbHjWI6q3cvx1Bz1cIv7lvr6vqFK0n7DsWG7f16o+Pt3XEIvL5DZga4Hq2cb7PX725rDyqgsHpaoZp8Sy72br0XIP3MAGbaEndixm+fLVYAfzIkmqDSbiHqlmB9ojfpkv1y7Q11yQA9mbRoMkqqu23I=",
      "encryptKey" : {
        "type" : "Encrypted",
        "value" : {
          "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
          "iv" : "xSuMmiohYF2ICpbB+07agQ==",
          "ciphertext" : "kDkMjhlI4LNHbgNS52A5N2MmBCm5i/Wnp2oVGMRQXSfaQJsYWnMRtumqCgAlzl6aHXWslP/92Hw/bMl9s0obAYHJ4S0iBG0pbYGLpPS3oo585lUw109tdfQw7pYnZI/OPmnFs3oK07SjFI7eAaIiPuUYLqnvwVKjJ4tNT0Rrv9ganbtBTkBebsvtITH+rYOVc32VxiKow6d2rcoL1j9NwTNE4gW58Qr+apQCwiZLyJDgCDwPfNIvNHJTtNQDgc1wXgfGpTwrclH+O6v7w3w8ZZzfd5qnAvI154VslrSsbJF2U2u6ur3RGVW5NWRAWm/dvxqlRrbhCMzHSkFQ9Edo9GYx5+MUSPJJyl7J5HXcYu9tnehnKqZ8jjfwGBryh1q1uGbFg7CdJ0snhkCmloVx5X2I3GXYmRg5AB9Y0ofxsLqZDY8JkLB1R1LvaoEkrxNjia9UPeEIXog1FfnQDV4WMs0l/n4TcoRH1D7rb/g7Xm0ja+U8AGOQWgyzGrHC5GYrall7OVP4fFMtKQettwOERz2mCUrr2a5NMuDTUOBNGFaOnJ4RLC2U3kyMjHdo4xLxalgrjLxkN36bmKggkj4VcdZStWPij8cBLYIqouVFyo+gwCVCrT6ZMeID4NvKGoiOGqr5W4Jjf40pDxhjUSXgZpLoW96qf+MQBRc80p5VP4foIQvuSOTIt2esOWy9iB+3aI0PmLCIqj2vqY/QqflpZ1PdF3JYzYgFuU13VnWUIh7GIk4BLie7kZPkZvSDNHvWIiPLpI6R++LGrMeY4Hh8EHZvnH8ybsMa3m5Ns1XaxuI29BtHNv6aPPanV/MKgNN0UzCYHweh+Z8ToBNJd2XudQXCvPcbc9Blz+s+BZgBTLxvGBU9kRXS2m+IQk2r0q1vx5YgwgWdCk0mt3PGAyQanPzU3Foc5pahaED9XzGYjnj/jWYUBIJ9HWwpJPhayvlpx9mnZwqLPOmGG006OAj9e0mQwll/yOa2hEVTTddCtx906a/aqpF5WeIikXYJ89gRNd3QqdC1xtafPjhSN1krvcIY/icZWFxxsFstDNOvs/xftr/sVR9/0UHSCXgM5hpgC2EOdJf7SnVNoJa0Iz9EEyOaAlCKBovrudTSYY76iAokk7IpKFHVhOTORGq++1cmRsZ0XLoYwXpWl1L+jt/hoeubSSYnFAvVW95UZ3CRT+9UBfs2kMQEpVwFkxLy3j230db/s4WLShszkDAdWxA41S656i+MYen9ZQbHVagkiBJmh/tWOUYcrd++XNZjyycNe2P+khNilBt6Hm2cpV/LwOiHAeOUHyMnvaLvDPn40B1KSHSqhLzz/bfmfG+N9gdJTIkiHM2FEBGVcWOF25uSmzkIIVmlDaPnY4yzWExUlJAiSUXubAYFBtWj21/We2HcdTDfnlPybPewNkFMaCuSI6RGq7ibecK/8sGLJTuDluc46keq+M8s1uqkVlIgTDnK6ueQSneIWnPUslDKw8P7WojKCf5LKUVEiCPgwMXYleqDyYcXpT6kaYakKUj6aTa36rSnxOK6WYygI3KwsAqiHswKlLZA3OKzrDLmomKL0txTT6cptqdJDI09VlHzG3VHrDnIW7HoL5i07ebFdKjjRuEJCR2XzBw5I7RtP7N5pL6+SeDyG9ZRXkBGBVQXVjsSP+DZh79MZ70YV86fYys5tjZQBdWr3WdTW9VAjKD9T3ZKpzDPObjHO87jSKy2CjZfR9bap1WADm1+SIl7HM5zzR6AXl9GxnJnNYW4x7c/kE0ujtip95msihI8+B37Vm3mu9fKSyvkVv/t0HxEKIS9EgbgXQr9E6LXP/4B5g60jmF5fYbGERjqoood58OfNRWxR/4eOnoaHfzBqYAFpFYtSp4D0pPMe3tu0CMg18CD22Ku/dJEy6k2SdTxKPBHz7j3eHzX20a+L+yYKhEKb41EqZT400UpzWotdnRns6yGgMTPDVoZeylMrOJf3jq0WBnQwUBSSBIe+CgMTMnvmydQSIu5zV/SM1r4H8GwWjjhR3TTUwHZQNA49pnK9ekT79q8HDnkdmo5c8EAcL2hBTPbaIygE3cMNBYSa8P3D+Qj79ZEfhSvFc3eQ+g4NWKTWukfqIsFPokgVwvlS25uvQDq/Ng4qB1CyPUDcR6TRTVNQHqdh79HbEGbhApGhkVXiWZA"
        }
      }
    } ],
    "settings" : {
      "version" : 0,
      "directories" : { },
      "api" : {
        "sessionTimeout" : {
          "duration" : 8,
          "units" : "Hours"
        }
      },
      "configuration" : {
        "scheme" : "http",
        "schemeCertificate" : "ssl-certificate-private-key",
        "port" : 45245,
        "centralConfig" : true,
        "autoSaveIntervalSeconds" : 60,
        "backupCopies" : 50
      },
      "hbMqttBroker" : {
        "enabled" : true,
        "allowAnonymous" : true,
        "endpoints" : [ {
          "hostname" : "0.0.0.0",
          "port" : 1885,
          "useSSL" : false,
          "certificateKeyAlias" : "app-certificate-private-key",
          "protocol" : "mqtt.tcp"
        }, {
          "hostname" : "0.0.0.0",
          "port" : 1886,
          "useSSL" : false,
          "certificateKeyAlias" : "",
          "protocol" : "mqtt.ws"
        } ]
      },
      "restDataServer" : {
        "enabled" : true,
        "hostname" : "0.0.0.0",
        "port" : 8885,
        "useHttps" : false,
        "schemeCertificate" : "app-certificate-private-key",
        "allowAnonymous" : true,
        "authenticationModes" : [ "LOGIN", "API_KEY" ],
        "mcpServerEnabled" : true,
        "mcpServerPort" : 45345
      },
      "log" : {
        "debugLogging" : "ALL",
        "fileSizeMB" : 100,
        "logAuditEvents" : false
      },
      "redundancy" : {
        "backup" : {
          "enabled" : false,
          "primary" : {
            "uri" : "",
            "pingIntervalSeconds" : 10,
            "pingAttempts" : 1
          }
        }
      },
      "expressionEngine" : {
        "allowExpressionEval" : false,
        "allowEnvironmentVariables" : false,
        "expressionEngineTimeoutSeconds" : 10,
        "hubBindingName" : "hub",
        "allowExpressionImports" : false
      },
      "backup" : {
        "enabled" : true,
        "cronSchedule" : "*/1 * * * *",
        "repo" : {
          "type" : "git",
          "name" : "HubBackup",
          "uri" : "https://github.com/taicho-hb/testRepo.git",
          "author" : "",
          "email" : "",
          "auth" : {
            "type" : "pass",
            "username" : "taicho",
            "password" : {
              "type" : "Encrypted",
              "value" : {
                "keyId" : "vrBpcHOKKwwsQER6zmCP9g==",
                "iv" : "FVphgNLmvIkRJ2DQg/LOrg==",
                "ciphertext" : "u6npxkDootDj2b3/MSUrBFrXwFccQl/kPoPMkEskcjyUWP0rz/jY0UOOU+lYGtdW"
              }
            }
          }
        },
        "branch" : "main",
        "deployFile" : "intelligencehub-deployment12345.json"
      }
    }
  }
}